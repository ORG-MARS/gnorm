// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// CollationTable is the database name for the table.
const CollationTable = "information_schema.collations"

// Collation represents a row from 'information_schema.collations'.
type Collation struct {
	CollationCatalog SQLIdentifier `yaml:"collation_catalog,omitempty"` // collation_catalog
	CollationSchema  SQLIdentifier `yaml:"collation_schema,omitempty"`  // collation_schema
	CollationName    SQLIdentifier `yaml:"collation_name,omitempty"`    // collation_name
	PadAttribute     CharacterData `yaml:"pad_attribute,omitempty"`     // pad_attribute
}

// Constants defining each column in the table.
const (
	CollationCollationCatalogField = "collation_catalog"
	CollationCollationSchemaField  = "collation_schema"
	CollationCollationNameField    = "collation_name"
	CollationPadAttributeField     = "pad_attribute"
)

// WhereClauses for every type in Collation.
var (
	CollationCollationCatalogWhere SQLIdentifierField = "collation_catalog"
	CollationCollationSchemaWhere  SQLIdentifierField = "collation_schema"
	CollationCollationNameWhere    SQLIdentifierField = "collation_name"
	CollationPadAttributeWhere     CharacterDataField = "pad_attribute"
)

// QueryOneCollation retrieves a row from 'information_schema.collations' as a Collation.
func QueryOneCollation(db XODB, where WhereClause, order OrderBy) (*Collation, error) {
	const origsqlstr = `SELECT ` +
		`collation_catalog, collation_schema, collation_name, pad_attribute ` +
		`FROM information_schema.collations WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String() + " LIMIT 1"

	c := &Collation{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&c.CollationCatalog, &c.CollationSchema, &c.CollationName, &c.PadAttribute)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return c, nil
}

// QueryCollation retrieves rows from 'information_schema.collations' as a slice of Collation.
func QueryCollation(db XODB, where WhereClause, order OrderBy) ([]*Collation, error) {
	const origsqlstr = `SELECT ` +
		`collation_catalog, collation_schema, collation_name, pad_attribute ` +
		`FROM information_schema.collations WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String()

	var vals []*Collation
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		c := Collation{}

		err = q.Scan(&c.CollationCatalog, &c.CollationSchema, &c.CollationName, &c.PadAttribute)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &c)
	}
	return vals, nil
}

// AllCollation retrieves all rows from 'information_schema.collations' as a slice of Collation.
func AllCollation(db XODB, order OrderBy) ([]*Collation, error) {
	const origsqlstr = `SELECT ` +
		`collation_catalog, collation_schema, collation_name, pad_attribute ` +
		`FROM information_schema.collations`

	sqlstr := origsqlstr + order.String()

	var vals []*Collation
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		c := Collation{}

		err = q.Scan(&c.CollationCatalog, &c.CollationSchema, &c.CollationName, &c.PadAttribute)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &c)
	}
	return vals, nil
}
