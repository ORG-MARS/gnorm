// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// DomainTable is the database name for the table.
const DomainTable = "information_schema.domains"

// Domain represents a row from 'information_schema.domains'.
type Domain struct {
	DomainCatalog          SQLIdentifier  `yaml:"domain_catalog,omitempty"`           // domain_catalog
	DomainSchema           SQLIdentifier  `yaml:"domain_schema,omitempty"`            // domain_schema
	DomainName             SQLIdentifier  `yaml:"domain_name,omitempty"`              // domain_name
	DataType               CharacterData  `yaml:"data_type,omitempty"`                // data_type
	CharacterMaximumLength CardinalNumber `yaml:"character_maximum_length,omitempty"` // character_maximum_length
	CharacterOctetLength   CardinalNumber `yaml:"character_octet_length,omitempty"`   // character_octet_length
	CharacterSetCatalog    SQLIdentifier  `yaml:"character_set_catalog,omitempty"`    // character_set_catalog
	CharacterSetSchema     SQLIdentifier  `yaml:"character_set_schema,omitempty"`     // character_set_schema
	CharacterSetName       SQLIdentifier  `yaml:"character_set_name,omitempty"`       // character_set_name
	CollationCatalog       SQLIdentifier  `yaml:"collation_catalog,omitempty"`        // collation_catalog
	CollationSchema        SQLIdentifier  `yaml:"collation_schema,omitempty"`         // collation_schema
	CollationName          SQLIdentifier  `yaml:"collation_name,omitempty"`           // collation_name
	NumericPrecision       CardinalNumber `yaml:"numeric_precision,omitempty"`        // numeric_precision
	NumericPrecisionRadix  CardinalNumber `yaml:"numeric_precision_radix,omitempty"`  // numeric_precision_radix
	NumericScale           CardinalNumber `yaml:"numeric_scale,omitempty"`            // numeric_scale
	DatetimePrecision      CardinalNumber `yaml:"datetime_precision,omitempty"`       // datetime_precision
	IntervalType           CharacterData  `yaml:"interval_type,omitempty"`            // interval_type
	IntervalPrecision      CardinalNumber `yaml:"interval_precision,omitempty"`       // interval_precision
	DomainDefault          CharacterData  `yaml:"domain_default,omitempty"`           // domain_default
	UdtCatalog             SQLIdentifier  `yaml:"udt_catalog,omitempty"`              // udt_catalog
	UdtSchema              SQLIdentifier  `yaml:"udt_schema,omitempty"`               // udt_schema
	UdtName                SQLIdentifier  `yaml:"udt_name,omitempty"`                 // udt_name
	ScopeCatalog           SQLIdentifier  `yaml:"scope_catalog,omitempty"`            // scope_catalog
	ScopeSchema            SQLIdentifier  `yaml:"scope_schema,omitempty"`             // scope_schema
	ScopeName              SQLIdentifier  `yaml:"scope_name,omitempty"`               // scope_name
	MaximumCardinality     CardinalNumber `yaml:"maximum_cardinality,omitempty"`      // maximum_cardinality
	DtdIdentifier          SQLIdentifier  `yaml:"dtd_identifier,omitempty"`           // dtd_identifier
}

// Constants defining each column in the table.
const (
	DomainDomainCatalogField          = "domain_catalog"
	DomainDomainSchemaField           = "domain_schema"
	DomainDomainNameField             = "domain_name"
	DomainDataTypeField               = "data_type"
	DomainCharacterMaximumLengthField = "character_maximum_length"
	DomainCharacterOctetLengthField   = "character_octet_length"
	DomainCharacterSetCatalogField    = "character_set_catalog"
	DomainCharacterSetSchemaField     = "character_set_schema"
	DomainCharacterSetNameField       = "character_set_name"
	DomainCollationCatalogField       = "collation_catalog"
	DomainCollationSchemaField        = "collation_schema"
	DomainCollationNameField          = "collation_name"
	DomainNumericPrecisionField       = "numeric_precision"
	DomainNumericPrecisionRadixField  = "numeric_precision_radix"
	DomainNumericScaleField           = "numeric_scale"
	DomainDatetimePrecisionField      = "datetime_precision"
	DomainIntervalTypeField           = "interval_type"
	DomainIntervalPrecisionField      = "interval_precision"
	DomainDomainDefaultField          = "domain_default"
	DomainUdtCatalogField             = "udt_catalog"
	DomainUdtSchemaField              = "udt_schema"
	DomainUdtNameField                = "udt_name"
	DomainScopeCatalogField           = "scope_catalog"
	DomainScopeSchemaField            = "scope_schema"
	DomainScopeNameField              = "scope_name"
	DomainMaximumCardinalityField     = "maximum_cardinality"
	DomainDtdIdentifierField          = "dtd_identifier"
)

// WhereClauses for every type in Domain.
var (
	DomainDomainCatalogWhere          SQLIdentifierField  = "domain_catalog"
	DomainDomainSchemaWhere           SQLIdentifierField  = "domain_schema"
	DomainDomainNameWhere             SQLIdentifierField  = "domain_name"
	DomainDataTypeWhere               CharacterDataField  = "data_type"
	DomainCharacterMaximumLengthWhere CardinalNumberField = "character_maximum_length"
	DomainCharacterOctetLengthWhere   CardinalNumberField = "character_octet_length"
	DomainCharacterSetCatalogWhere    SQLIdentifierField  = "character_set_catalog"
	DomainCharacterSetSchemaWhere     SQLIdentifierField  = "character_set_schema"
	DomainCharacterSetNameWhere       SQLIdentifierField  = "character_set_name"
	DomainCollationCatalogWhere       SQLIdentifierField  = "collation_catalog"
	DomainCollationSchemaWhere        SQLIdentifierField  = "collation_schema"
	DomainCollationNameWhere          SQLIdentifierField  = "collation_name"
	DomainNumericPrecisionWhere       CardinalNumberField = "numeric_precision"
	DomainNumericPrecisionRadixWhere  CardinalNumberField = "numeric_precision_radix"
	DomainNumericScaleWhere           CardinalNumberField = "numeric_scale"
	DomainDatetimePrecisionWhere      CardinalNumberField = "datetime_precision"
	DomainIntervalTypeWhere           CharacterDataField  = "interval_type"
	DomainIntervalPrecisionWhere      CardinalNumberField = "interval_precision"
	DomainDomainDefaultWhere          CharacterDataField  = "domain_default"
	DomainUdtCatalogWhere             SQLIdentifierField  = "udt_catalog"
	DomainUdtSchemaWhere              SQLIdentifierField  = "udt_schema"
	DomainUdtNameWhere                SQLIdentifierField  = "udt_name"
	DomainScopeCatalogWhere           SQLIdentifierField  = "scope_catalog"
	DomainScopeSchemaWhere            SQLIdentifierField  = "scope_schema"
	DomainScopeNameWhere              SQLIdentifierField  = "scope_name"
	DomainMaximumCardinalityWhere     CardinalNumberField = "maximum_cardinality"
	DomainDtdIdentifierWhere          SQLIdentifierField  = "dtd_identifier"
)

// QueryOneDomain retrieves a row from 'information_schema.domains' as a Domain.
func QueryOneDomain(db XODB, where WhereClause, order OrderBy) (*Domain, error) {
	const origsqlstr = `SELECT ` +
		`domain_catalog, domain_schema, domain_name, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, domain_default, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier ` +
		`FROM information_schema.domains WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String() + " LIMIT 1"

	d := &Domain{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&d.DomainCatalog, &d.DomainSchema, &d.DomainName, &d.DataType, &d.CharacterMaximumLength, &d.CharacterOctetLength, &d.CharacterSetCatalog, &d.CharacterSetSchema, &d.CharacterSetName, &d.CollationCatalog, &d.CollationSchema, &d.CollationName, &d.NumericPrecision, &d.NumericPrecisionRadix, &d.NumericScale, &d.DatetimePrecision, &d.IntervalType, &d.IntervalPrecision, &d.DomainDefault, &d.UdtCatalog, &d.UdtSchema, &d.UdtName, &d.ScopeCatalog, &d.ScopeSchema, &d.ScopeName, &d.MaximumCardinality, &d.DtdIdentifier)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return d, nil
}

// QueryDomain retrieves rows from 'information_schema.domains' as a slice of Domain.
func QueryDomain(db XODB, where WhereClause, order OrderBy) ([]*Domain, error) {
	const origsqlstr = `SELECT ` +
		`domain_catalog, domain_schema, domain_name, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, domain_default, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier ` +
		`FROM information_schema.domains WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String()

	var vals []*Domain
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		d := Domain{}

		err = q.Scan(&d.DomainCatalog, &d.DomainSchema, &d.DomainName, &d.DataType, &d.CharacterMaximumLength, &d.CharacterOctetLength, &d.CharacterSetCatalog, &d.CharacterSetSchema, &d.CharacterSetName, &d.CollationCatalog, &d.CollationSchema, &d.CollationName, &d.NumericPrecision, &d.NumericPrecisionRadix, &d.NumericScale, &d.DatetimePrecision, &d.IntervalType, &d.IntervalPrecision, &d.DomainDefault, &d.UdtCatalog, &d.UdtSchema, &d.UdtName, &d.ScopeCatalog, &d.ScopeSchema, &d.ScopeName, &d.MaximumCardinality, &d.DtdIdentifier)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &d)
	}
	return vals, nil
}

// AllDomain retrieves all rows from 'information_schema.domains' as a slice of Domain.
func AllDomain(db XODB, order OrderBy) ([]*Domain, error) {
	const origsqlstr = `SELECT ` +
		`domain_catalog, domain_schema, domain_name, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, domain_default, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier ` +
		`FROM information_schema.domains`

	sqlstr := origsqlstr + order.String()

	var vals []*Domain
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		d := Domain{}

		err = q.Scan(&d.DomainCatalog, &d.DomainSchema, &d.DomainName, &d.DataType, &d.CharacterMaximumLength, &d.CharacterOctetLength, &d.CharacterSetCatalog, &d.CharacterSetSchema, &d.CharacterSetName, &d.CollationCatalog, &d.CollationSchema, &d.CollationName, &d.NumericPrecision, &d.NumericPrecisionRadix, &d.NumericScale, &d.DatetimePrecision, &d.IntervalType, &d.IntervalPrecision, &d.DomainDefault, &d.UdtCatalog, &d.UdtSchema, &d.UdtName, &d.ScopeCatalog, &d.ScopeSchema, &d.ScopeName, &d.MaximumCardinality, &d.DtdIdentifier)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &d)
	}
	return vals, nil
}
