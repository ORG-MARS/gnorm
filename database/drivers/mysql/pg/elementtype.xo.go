// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// ElementTypeTable is the database name for the table.
const ElementTypeTable = "information_schema.element_types"

// ElementType represents a row from 'information_schema.element_types'.
type ElementType struct {
	ObjectCatalog            SQLIdentifier  `yaml:"object_catalog,omitempty"`             // object_catalog
	ObjectSchema             SQLIdentifier  `yaml:"object_schema,omitempty"`              // object_schema
	ObjectName               SQLIdentifier  `yaml:"object_name,omitempty"`                // object_name
	ObjectType               CharacterData  `yaml:"object_type,omitempty"`                // object_type
	CollectionTypeIdentifier SQLIdentifier  `yaml:"collection_type_identifier,omitempty"` // collection_type_identifier
	DataType                 CharacterData  `yaml:"data_type,omitempty"`                  // data_type
	CharacterMaximumLength   CardinalNumber `yaml:"character_maximum_length,omitempty"`   // character_maximum_length
	CharacterOctetLength     CardinalNumber `yaml:"character_octet_length,omitempty"`     // character_octet_length
	CharacterSetCatalog      SQLIdentifier  `yaml:"character_set_catalog,omitempty"`      // character_set_catalog
	CharacterSetSchema       SQLIdentifier  `yaml:"character_set_schema,omitempty"`       // character_set_schema
	CharacterSetName         SQLIdentifier  `yaml:"character_set_name,omitempty"`         // character_set_name
	CollationCatalog         SQLIdentifier  `yaml:"collation_catalog,omitempty"`          // collation_catalog
	CollationSchema          SQLIdentifier  `yaml:"collation_schema,omitempty"`           // collation_schema
	CollationName            SQLIdentifier  `yaml:"collation_name,omitempty"`             // collation_name
	NumericPrecision         CardinalNumber `yaml:"numeric_precision,omitempty"`          // numeric_precision
	NumericPrecisionRadix    CardinalNumber `yaml:"numeric_precision_radix,omitempty"`    // numeric_precision_radix
	NumericScale             CardinalNumber `yaml:"numeric_scale,omitempty"`              // numeric_scale
	DatetimePrecision        CardinalNumber `yaml:"datetime_precision,omitempty"`         // datetime_precision
	IntervalType             CharacterData  `yaml:"interval_type,omitempty"`              // interval_type
	IntervalPrecision        CardinalNumber `yaml:"interval_precision,omitempty"`         // interval_precision
	DomainDefault            CharacterData  `yaml:"domain_default,omitempty"`             // domain_default
	UdtCatalog               SQLIdentifier  `yaml:"udt_catalog,omitempty"`                // udt_catalog
	UdtSchema                SQLIdentifier  `yaml:"udt_schema,omitempty"`                 // udt_schema
	UdtName                  SQLIdentifier  `yaml:"udt_name,omitempty"`                   // udt_name
	ScopeCatalog             SQLIdentifier  `yaml:"scope_catalog,omitempty"`              // scope_catalog
	ScopeSchema              SQLIdentifier  `yaml:"scope_schema,omitempty"`               // scope_schema
	ScopeName                SQLIdentifier  `yaml:"scope_name,omitempty"`                 // scope_name
	MaximumCardinality       CardinalNumber `yaml:"maximum_cardinality,omitempty"`        // maximum_cardinality
	DtdIdentifier            SQLIdentifier  `yaml:"dtd_identifier,omitempty"`             // dtd_identifier
}

// Constants defining each column in the table.
const (
	ElementTypeObjectCatalogField            = "object_catalog"
	ElementTypeObjectSchemaField             = "object_schema"
	ElementTypeObjectNameField               = "object_name"
	ElementTypeObjectTypeField               = "object_type"
	ElementTypeCollectionTypeIdentifierField = "collection_type_identifier"
	ElementTypeDataTypeField                 = "data_type"
	ElementTypeCharacterMaximumLengthField   = "character_maximum_length"
	ElementTypeCharacterOctetLengthField     = "character_octet_length"
	ElementTypeCharacterSetCatalogField      = "character_set_catalog"
	ElementTypeCharacterSetSchemaField       = "character_set_schema"
	ElementTypeCharacterSetNameField         = "character_set_name"
	ElementTypeCollationCatalogField         = "collation_catalog"
	ElementTypeCollationSchemaField          = "collation_schema"
	ElementTypeCollationNameField            = "collation_name"
	ElementTypeNumericPrecisionField         = "numeric_precision"
	ElementTypeNumericPrecisionRadixField    = "numeric_precision_radix"
	ElementTypeNumericScaleField             = "numeric_scale"
	ElementTypeDatetimePrecisionField        = "datetime_precision"
	ElementTypeIntervalTypeField             = "interval_type"
	ElementTypeIntervalPrecisionField        = "interval_precision"
	ElementTypeDomainDefaultField            = "domain_default"
	ElementTypeUdtCatalogField               = "udt_catalog"
	ElementTypeUdtSchemaField                = "udt_schema"
	ElementTypeUdtNameField                  = "udt_name"
	ElementTypeScopeCatalogField             = "scope_catalog"
	ElementTypeScopeSchemaField              = "scope_schema"
	ElementTypeScopeNameField                = "scope_name"
	ElementTypeMaximumCardinalityField       = "maximum_cardinality"
	ElementTypeDtdIdentifierField            = "dtd_identifier"
)

// WhereClauses for every type in ElementType.
var (
	ElementTypeObjectCatalogWhere            SQLIdentifierField  = "object_catalog"
	ElementTypeObjectSchemaWhere             SQLIdentifierField  = "object_schema"
	ElementTypeObjectNameWhere               SQLIdentifierField  = "object_name"
	ElementTypeObjectTypeWhere               CharacterDataField  = "object_type"
	ElementTypeCollectionTypeIdentifierWhere SQLIdentifierField  = "collection_type_identifier"
	ElementTypeDataTypeWhere                 CharacterDataField  = "data_type"
	ElementTypeCharacterMaximumLengthWhere   CardinalNumberField = "character_maximum_length"
	ElementTypeCharacterOctetLengthWhere     CardinalNumberField = "character_octet_length"
	ElementTypeCharacterSetCatalogWhere      SQLIdentifierField  = "character_set_catalog"
	ElementTypeCharacterSetSchemaWhere       SQLIdentifierField  = "character_set_schema"
	ElementTypeCharacterSetNameWhere         SQLIdentifierField  = "character_set_name"
	ElementTypeCollationCatalogWhere         SQLIdentifierField  = "collation_catalog"
	ElementTypeCollationSchemaWhere          SQLIdentifierField  = "collation_schema"
	ElementTypeCollationNameWhere            SQLIdentifierField  = "collation_name"
	ElementTypeNumericPrecisionWhere         CardinalNumberField = "numeric_precision"
	ElementTypeNumericPrecisionRadixWhere    CardinalNumberField = "numeric_precision_radix"
	ElementTypeNumericScaleWhere             CardinalNumberField = "numeric_scale"
	ElementTypeDatetimePrecisionWhere        CardinalNumberField = "datetime_precision"
	ElementTypeIntervalTypeWhere             CharacterDataField  = "interval_type"
	ElementTypeIntervalPrecisionWhere        CardinalNumberField = "interval_precision"
	ElementTypeDomainDefaultWhere            CharacterDataField  = "domain_default"
	ElementTypeUdtCatalogWhere               SQLIdentifierField  = "udt_catalog"
	ElementTypeUdtSchemaWhere                SQLIdentifierField  = "udt_schema"
	ElementTypeUdtNameWhere                  SQLIdentifierField  = "udt_name"
	ElementTypeScopeCatalogWhere             SQLIdentifierField  = "scope_catalog"
	ElementTypeScopeSchemaWhere              SQLIdentifierField  = "scope_schema"
	ElementTypeScopeNameWhere                SQLIdentifierField  = "scope_name"
	ElementTypeMaximumCardinalityWhere       CardinalNumberField = "maximum_cardinality"
	ElementTypeDtdIdentifierWhere            SQLIdentifierField  = "dtd_identifier"
)

// QueryOneElementType retrieves a row from 'information_schema.element_types' as a ElementType.
func QueryOneElementType(db XODB, where WhereClause, order OrderBy) (*ElementType, error) {
	const origsqlstr = `SELECT ` +
		`object_catalog, object_schema, object_name, object_type, collection_type_identifier, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, domain_default, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier ` +
		`FROM information_schema.element_types WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String() + " LIMIT 1"

	et := &ElementType{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&et.ObjectCatalog, &et.ObjectSchema, &et.ObjectName, &et.ObjectType, &et.CollectionTypeIdentifier, &et.DataType, &et.CharacterMaximumLength, &et.CharacterOctetLength, &et.CharacterSetCatalog, &et.CharacterSetSchema, &et.CharacterSetName, &et.CollationCatalog, &et.CollationSchema, &et.CollationName, &et.NumericPrecision, &et.NumericPrecisionRadix, &et.NumericScale, &et.DatetimePrecision, &et.IntervalType, &et.IntervalPrecision, &et.DomainDefault, &et.UdtCatalog, &et.UdtSchema, &et.UdtName, &et.ScopeCatalog, &et.ScopeSchema, &et.ScopeName, &et.MaximumCardinality, &et.DtdIdentifier)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return et, nil
}

// QueryElementType retrieves rows from 'information_schema.element_types' as a slice of ElementType.
func QueryElementType(db XODB, where WhereClause, order OrderBy) ([]*ElementType, error) {
	const origsqlstr = `SELECT ` +
		`object_catalog, object_schema, object_name, object_type, collection_type_identifier, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, domain_default, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier ` +
		`FROM information_schema.element_types WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String()

	var vals []*ElementType
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		et := ElementType{}

		err = q.Scan(&et.ObjectCatalog, &et.ObjectSchema, &et.ObjectName, &et.ObjectType, &et.CollectionTypeIdentifier, &et.DataType, &et.CharacterMaximumLength, &et.CharacterOctetLength, &et.CharacterSetCatalog, &et.CharacterSetSchema, &et.CharacterSetName, &et.CollationCatalog, &et.CollationSchema, &et.CollationName, &et.NumericPrecision, &et.NumericPrecisionRadix, &et.NumericScale, &et.DatetimePrecision, &et.IntervalType, &et.IntervalPrecision, &et.DomainDefault, &et.UdtCatalog, &et.UdtSchema, &et.UdtName, &et.ScopeCatalog, &et.ScopeSchema, &et.ScopeName, &et.MaximumCardinality, &et.DtdIdentifier)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &et)
	}
	return vals, nil
}

// AllElementType retrieves all rows from 'information_schema.element_types' as a slice of ElementType.
func AllElementType(db XODB, order OrderBy) ([]*ElementType, error) {
	const origsqlstr = `SELECT ` +
		`object_catalog, object_schema, object_name, object_type, collection_type_identifier, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, domain_default, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier ` +
		`FROM information_schema.element_types`

	sqlstr := origsqlstr + order.String()

	var vals []*ElementType
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		et := ElementType{}

		err = q.Scan(&et.ObjectCatalog, &et.ObjectSchema, &et.ObjectName, &et.ObjectType, &et.CollectionTypeIdentifier, &et.DataType, &et.CharacterMaximumLength, &et.CharacterOctetLength, &et.CharacterSetCatalog, &et.CharacterSetSchema, &et.CharacterSetName, &et.CollationCatalog, &et.CollationSchema, &et.CollationName, &et.NumericPrecision, &et.NumericPrecisionRadix, &et.NumericScale, &et.DatetimePrecision, &et.IntervalType, &et.IntervalPrecision, &et.DomainDefault, &et.UdtCatalog, &et.UdtSchema, &et.UdtName, &et.ScopeCatalog, &et.ScopeSchema, &et.ScopeName, &et.MaximumCardinality, &et.DtdIdentifier)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &et)
	}
	return vals, nil
}
