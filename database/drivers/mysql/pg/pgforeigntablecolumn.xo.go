// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/pkg/errors"
)

// PgForeignTableColumnTable is the database name for the table.
const PgForeignTableColumnTable = "information_schema._pg_foreign_table_columns"

// PgForeignTableColumn represents a row from 'information_schema._pg_foreign_table_columns'.
type PgForeignTableColumn struct {
	Nspname       Name             `yaml:"nspname,omitempty"`       // nspname
	Relname       Name             `yaml:"relname,omitempty"`       // relname
	Attname       Name             `yaml:"attname,omitempty"`       // attname
	Attfdwoptions []sql.NullString `yaml:"attfdwoptions,omitempty"` // attfdwoptions
}

// Constants defining each column in the table.
const (
	PgForeignTableColumnNspnameField       = "nspname"
	PgForeignTableColumnRelnameField       = "relname"
	PgForeignTableColumnAttnameField       = "attname"
	PgForeignTableColumnAttfdwoptionsField = "attfdwoptions"
)

// WhereClauses for every type in PgForeignTableColumn.
var (
	PgForeignTableColumnNspnameWhere       NameField       = "nspname"
	PgForeignTableColumnRelnameWhere       NameField       = "relname"
	PgForeignTableColumnAttnameWhere       NameField       = "attname"
	PgForeignTableColumnAttfdwoptionsWhere NullStringField = "attfdwoptions"
)

// QueryOnePgForeignTableColumn retrieves a row from 'information_schema._pg_foreign_table_columns' as a PgForeignTableColumn.
func QueryOnePgForeignTableColumn(db XODB, where WhereClause, order OrderBy) (*PgForeignTableColumn, error) {
	const origsqlstr = `SELECT ` +
		`nspname, relname, attname, attfdwoptions ` +
		`FROM information_schema._pg_foreign_table_columns WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String() + " LIMIT 1"

	pftc := &PgForeignTableColumn{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&pftc.Nspname, &pftc.Relname, &pftc.Attname, &pftc.Attfdwoptions)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return pftc, nil
}

// QueryPgForeignTableColumn retrieves rows from 'information_schema._pg_foreign_table_columns' as a slice of PgForeignTableColumn.
func QueryPgForeignTableColumn(db XODB, where WhereClause, order OrderBy) ([]*PgForeignTableColumn, error) {
	const origsqlstr = `SELECT ` +
		`nspname, relname, attname, attfdwoptions ` +
		`FROM information_schema._pg_foreign_table_columns WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String()

	var vals []*PgForeignTableColumn
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		pftc := PgForeignTableColumn{}

		err = q.Scan(&pftc.Nspname, &pftc.Relname, &pftc.Attname, &pftc.Attfdwoptions)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &pftc)
	}
	return vals, nil
}

// AllPgForeignTableColumn retrieves all rows from 'information_schema._pg_foreign_table_columns' as a slice of PgForeignTableColumn.
func AllPgForeignTableColumn(db XODB, order OrderBy) ([]*PgForeignTableColumn, error) {
	const origsqlstr = `SELECT ` +
		`nspname, relname, attname, attfdwoptions ` +
		`FROM information_schema._pg_foreign_table_columns`

	sqlstr := origsqlstr + order.String()

	var vals []*PgForeignTableColumn
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		pftc := PgForeignTableColumn{}

		err = q.Scan(&pftc.Nspname, &pftc.Relname, &pftc.Attname, &pftc.Attfdwoptions)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &pftc)
	}
	return vals, nil
}
