// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// RoleRoutineGrantTable is the database name for the table.
const RoleRoutineGrantTable = "information_schema.role_routine_grants"

// RoleRoutineGrant represents a row from 'information_schema.role_routine_grants'.
type RoleRoutineGrant struct {
	Grantor         SQLIdentifier `yaml:"grantor,omitempty"`          // grantor
	Grantee         SQLIdentifier `yaml:"grantee,omitempty"`          // grantee
	SpecificCatalog SQLIdentifier `yaml:"specific_catalog,omitempty"` // specific_catalog
	SpecificSchema  SQLIdentifier `yaml:"specific_schema,omitempty"`  // specific_schema
	SpecificName    SQLIdentifier `yaml:"specific_name,omitempty"`    // specific_name
	RoutineCatalog  SQLIdentifier `yaml:"routine_catalog,omitempty"`  // routine_catalog
	RoutineSchema   SQLIdentifier `yaml:"routine_schema,omitempty"`   // routine_schema
	RoutineName     SQLIdentifier `yaml:"routine_name,omitempty"`     // routine_name
	PrivilegeType   CharacterData `yaml:"privilege_type,omitempty"`   // privilege_type
	IsGrantable     YesOrNo       `yaml:"is_grantable,omitempty"`     // is_grantable
}

// Constants defining each column in the table.
const (
	RoleRoutineGrantGrantorField         = "grantor"
	RoleRoutineGrantGranteeField         = "grantee"
	RoleRoutineGrantSpecificCatalogField = "specific_catalog"
	RoleRoutineGrantSpecificSchemaField  = "specific_schema"
	RoleRoutineGrantSpecificNameField    = "specific_name"
	RoleRoutineGrantRoutineCatalogField  = "routine_catalog"
	RoleRoutineGrantRoutineSchemaField   = "routine_schema"
	RoleRoutineGrantRoutineNameField     = "routine_name"
	RoleRoutineGrantPrivilegeTypeField   = "privilege_type"
	RoleRoutineGrantIsGrantableField     = "is_grantable"
)

// WhereClauses for every type in RoleRoutineGrant.
var (
	RoleRoutineGrantGrantorWhere         SQLIdentifierField = "grantor"
	RoleRoutineGrantGranteeWhere         SQLIdentifierField = "grantee"
	RoleRoutineGrantSpecificCatalogWhere SQLIdentifierField = "specific_catalog"
	RoleRoutineGrantSpecificSchemaWhere  SQLIdentifierField = "specific_schema"
	RoleRoutineGrantSpecificNameWhere    SQLIdentifierField = "specific_name"
	RoleRoutineGrantRoutineCatalogWhere  SQLIdentifierField = "routine_catalog"
	RoleRoutineGrantRoutineSchemaWhere   SQLIdentifierField = "routine_schema"
	RoleRoutineGrantRoutineNameWhere     SQLIdentifierField = "routine_name"
	RoleRoutineGrantPrivilegeTypeWhere   CharacterDataField = "privilege_type"
	RoleRoutineGrantIsGrantableWhere     YesOrNoField       = "is_grantable"
)

// QueryOneRoleRoutineGrant retrieves a row from 'information_schema.role_routine_grants' as a RoleRoutineGrant.
func QueryOneRoleRoutineGrant(db XODB, where WhereClause, order OrderBy) (*RoleRoutineGrant, error) {
	const origsqlstr = `SELECT ` +
		`grantor, grantee, specific_catalog, specific_schema, specific_name, routine_catalog, routine_schema, routine_name, privilege_type, is_grantable ` +
		`FROM information_schema.role_routine_grants WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String() + " LIMIT 1"

	rrg := &RoleRoutineGrant{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&rrg.Grantor, &rrg.Grantee, &rrg.SpecificCatalog, &rrg.SpecificSchema, &rrg.SpecificName, &rrg.RoutineCatalog, &rrg.RoutineSchema, &rrg.RoutineName, &rrg.PrivilegeType, &rrg.IsGrantable)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return rrg, nil
}

// QueryRoleRoutineGrant retrieves rows from 'information_schema.role_routine_grants' as a slice of RoleRoutineGrant.
func QueryRoleRoutineGrant(db XODB, where WhereClause, order OrderBy) ([]*RoleRoutineGrant, error) {
	const origsqlstr = `SELECT ` +
		`grantor, grantee, specific_catalog, specific_schema, specific_name, routine_catalog, routine_schema, routine_name, privilege_type, is_grantable ` +
		`FROM information_schema.role_routine_grants WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String()

	var vals []*RoleRoutineGrant
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		rrg := RoleRoutineGrant{}

		err = q.Scan(&rrg.Grantor, &rrg.Grantee, &rrg.SpecificCatalog, &rrg.SpecificSchema, &rrg.SpecificName, &rrg.RoutineCatalog, &rrg.RoutineSchema, &rrg.RoutineName, &rrg.PrivilegeType, &rrg.IsGrantable)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &rrg)
	}
	return vals, nil
}

// AllRoleRoutineGrant retrieves all rows from 'information_schema.role_routine_grants' as a slice of RoleRoutineGrant.
func AllRoleRoutineGrant(db XODB, order OrderBy) ([]*RoleRoutineGrant, error) {
	const origsqlstr = `SELECT ` +
		`grantor, grantee, specific_catalog, specific_schema, specific_name, routine_catalog, routine_schema, routine_name, privilege_type, is_grantable ` +
		`FROM information_schema.role_routine_grants`

	sqlstr := origsqlstr + order.String()

	var vals []*RoleRoutineGrant
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		rrg := RoleRoutineGrant{}

		err = q.Scan(&rrg.Grantor, &rrg.Grantee, &rrg.SpecificCatalog, &rrg.SpecificSchema, &rrg.SpecificName, &rrg.RoutineCatalog, &rrg.RoutineSchema, &rrg.RoutineName, &rrg.PrivilegeType, &rrg.IsGrantable)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &rrg)
	}
	return vals, nil
}
