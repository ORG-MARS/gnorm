// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// RoleUsageGrantTable is the database name for the table.
const RoleUsageGrantTable = "information_schema.role_usage_grants"

// RoleUsageGrant represents a row from 'information_schema.role_usage_grants'.
type RoleUsageGrant struct {
	Grantor       SQLIdentifier `yaml:"grantor,omitempty"`        // grantor
	Grantee       SQLIdentifier `yaml:"grantee,omitempty"`        // grantee
	ObjectCatalog SQLIdentifier `yaml:"object_catalog,omitempty"` // object_catalog
	ObjectSchema  SQLIdentifier `yaml:"object_schema,omitempty"`  // object_schema
	ObjectName    SQLIdentifier `yaml:"object_name,omitempty"`    // object_name
	ObjectType    CharacterData `yaml:"object_type,omitempty"`    // object_type
	PrivilegeType CharacterData `yaml:"privilege_type,omitempty"` // privilege_type
	IsGrantable   YesOrNo       `yaml:"is_grantable,omitempty"`   // is_grantable
}

// Constants defining each column in the table.
const (
	RoleUsageGrantGrantorField       = "grantor"
	RoleUsageGrantGranteeField       = "grantee"
	RoleUsageGrantObjectCatalogField = "object_catalog"
	RoleUsageGrantObjectSchemaField  = "object_schema"
	RoleUsageGrantObjectNameField    = "object_name"
	RoleUsageGrantObjectTypeField    = "object_type"
	RoleUsageGrantPrivilegeTypeField = "privilege_type"
	RoleUsageGrantIsGrantableField   = "is_grantable"
)

// WhereClauses for every type in RoleUsageGrant.
var (
	RoleUsageGrantGrantorWhere       SQLIdentifierField = "grantor"
	RoleUsageGrantGranteeWhere       SQLIdentifierField = "grantee"
	RoleUsageGrantObjectCatalogWhere SQLIdentifierField = "object_catalog"
	RoleUsageGrantObjectSchemaWhere  SQLIdentifierField = "object_schema"
	RoleUsageGrantObjectNameWhere    SQLIdentifierField = "object_name"
	RoleUsageGrantObjectTypeWhere    CharacterDataField = "object_type"
	RoleUsageGrantPrivilegeTypeWhere CharacterDataField = "privilege_type"
	RoleUsageGrantIsGrantableWhere   YesOrNoField       = "is_grantable"
)

// QueryOneRoleUsageGrant retrieves a row from 'information_schema.role_usage_grants' as a RoleUsageGrant.
func QueryOneRoleUsageGrant(db XODB, where WhereClause, order OrderBy) (*RoleUsageGrant, error) {
	const origsqlstr = `SELECT ` +
		`grantor, grantee, object_catalog, object_schema, object_name, object_type, privilege_type, is_grantable ` +
		`FROM information_schema.role_usage_grants WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String() + " LIMIT 1"

	rug := &RoleUsageGrant{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&rug.Grantor, &rug.Grantee, &rug.ObjectCatalog, &rug.ObjectSchema, &rug.ObjectName, &rug.ObjectType, &rug.PrivilegeType, &rug.IsGrantable)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return rug, nil
}

// QueryRoleUsageGrant retrieves rows from 'information_schema.role_usage_grants' as a slice of RoleUsageGrant.
func QueryRoleUsageGrant(db XODB, where WhereClause, order OrderBy) ([]*RoleUsageGrant, error) {
	const origsqlstr = `SELECT ` +
		`grantor, grantee, object_catalog, object_schema, object_name, object_type, privilege_type, is_grantable ` +
		`FROM information_schema.role_usage_grants WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String()

	var vals []*RoleUsageGrant
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		rug := RoleUsageGrant{}

		err = q.Scan(&rug.Grantor, &rug.Grantee, &rug.ObjectCatalog, &rug.ObjectSchema, &rug.ObjectName, &rug.ObjectType, &rug.PrivilegeType, &rug.IsGrantable)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &rug)
	}
	return vals, nil
}

// AllRoleUsageGrant retrieves all rows from 'information_schema.role_usage_grants' as a slice of RoleUsageGrant.
func AllRoleUsageGrant(db XODB, order OrderBy) ([]*RoleUsageGrant, error) {
	const origsqlstr = `SELECT ` +
		`grantor, grantee, object_catalog, object_schema, object_name, object_type, privilege_type, is_grantable ` +
		`FROM information_schema.role_usage_grants`

	sqlstr := origsqlstr + order.String()

	var vals []*RoleUsageGrant
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		rug := RoleUsageGrant{}

		err = q.Scan(&rug.Grantor, &rug.Grantee, &rug.ObjectCatalog, &rug.ObjectSchema, &rug.ObjectName, &rug.ObjectType, &rug.PrivilegeType, &rug.IsGrantable)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &rug)
	}
	return vals, nil
}
