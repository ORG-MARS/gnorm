// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// TableTable is the database name for the table.
const TableTable = "information_schema.tables"

// Table represents a row from 'information_schema.tables'.
type Table struct {
	TableCatalog SQLIdentifier `yaml:"table_catalog,omitempty"` // table_catalog
	TableSchema  SQLIdentifier `yaml:"table_schema,omitempty"`  // table_schema
	TableName    SQLIdentifier `yaml:"table_name,omitempty"`    // table_name
	TableType    CharacterData `yaml:"table_type,omitempty"`    // table_type
}

// Constants defining each column in the table.
const (
	TableTableCatalogField = "table_catalog"
	TableTableSchemaField  = "table_schema"
	TableTableNameField    = "table_name"
	TableTableTypeField    = "table_type"
)

// WhereClauses for every type in Table.
var (
	TableTableCatalogWhere SQLIdentifierField = "table_catalog"
	TableTableSchemaWhere  SQLIdentifierField = "table_schema"
	TableTableNameWhere    SQLIdentifierField = "table_name"
	TableTableTypeWhere    CharacterDataField = "table_type"
)

// QueryOneTable retrieves a row from 'information_schema.tables' as a Table.
func QueryOneTable(db XODB, where WhereClause, order OrderBy) (*Table, error) {
	const origsqlstr = `SELECT ` +
		`table_catalog, table_schema, table_name, table_type ` +
		`FROM information_schema.tables WHERE (`

	sqlstr := origsqlstr + where.String() + ") " + order.String() + " LIMIT 1"

	t := &Table{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&t.TableCatalog, &t.TableSchema, &t.TableName, &t.TableType)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return t, nil
}

// QueryTable retrieves rows from 'information_schema.tables' as a slice of Table.
func QueryTable(db XODB, where WhereClause, order OrderBy) ([]*Table, error) {
	const origsqlstr = `SELECT ` +
		`table_catalog, table_schema, table_name, table_type ` +
		`FROM information_schema.tables WHERE (`

	sqlstr := origsqlstr + where.String() + ") " + order.String()

	var vals []*Table
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		t := Table{}

		err = q.Scan(&t.TableCatalog, &t.TableSchema, &t.TableName, &t.TableType)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &t)
	}
	return vals, nil
}

// AllTable retrieves all rows from 'information_schema.tables' as a slice of Table.
func AllTable(db XODB, order OrderBy) ([]*Table, error) {
	const origsqlstr = `SELECT ` +
		`table_catalog, table_schema, table_name, table_type ` +
		`FROM information_schema.tables`

	sqlstr := origsqlstr + order.String()

	var vals []*Table
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		t := Table{}

		err = q.Scan(&t.TableCatalog, &t.TableSchema, &t.TableName, &t.TableType)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &t)
	}
	return vals, nil
}
