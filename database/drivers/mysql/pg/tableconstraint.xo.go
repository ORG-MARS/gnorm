// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// TableConstraintTable is the database name for the table.
const TableConstraintTable = "information_schema.table_constraints"

// TableConstraint represents a row from 'information_schema.table_constraints'.
type TableConstraint struct {
	ConstraintCatalog SQLIdentifier `yaml:"constraint_catalog,omitempty"` // constraint_catalog
	ConstraintSchema  SQLIdentifier `yaml:"constraint_schema,omitempty"`  // constraint_schema
	ConstraintName    SQLIdentifier `yaml:"constraint_name,omitempty"`    // constraint_name
	TableCatalog      SQLIdentifier `yaml:"table_catalog,omitempty"`      // table_catalog
	TableSchema       SQLIdentifier `yaml:"table_schema,omitempty"`       // table_schema
	TableName         SQLIdentifier `yaml:"table_name,omitempty"`         // table_name
	ConstraintType    CharacterData `yaml:"constraint_type,omitempty"`    // constraint_type
	IsDeferrable      YesOrNo       `yaml:"is_deferrable,omitempty"`      // is_deferrable
	InitiallyDeferred YesOrNo       `yaml:"initially_deferred,omitempty"` // initially_deferred
}

// Constants defining each column in the table.
const (
	TableConstraintConstraintCatalogField = "constraint_catalog"
	TableConstraintConstraintSchemaField  = "constraint_schema"
	TableConstraintConstraintNameField    = "constraint_name"
	TableConstraintTableCatalogField      = "table_catalog"
	TableConstraintTableSchemaField       = "table_schema"
	TableConstraintTableNameField         = "table_name"
	TableConstraintConstraintTypeField    = "constraint_type"
	TableConstraintIsDeferrableField      = "is_deferrable"
	TableConstraintInitiallyDeferredField = "initially_deferred"
)

// WhereClauses for every type in TableConstraint.
var (
	TableConstraintConstraintCatalogWhere SQLIdentifierField = "constraint_catalog"
	TableConstraintConstraintSchemaWhere  SQLIdentifierField = "constraint_schema"
	TableConstraintConstraintNameWhere    SQLIdentifierField = "constraint_name"
	TableConstraintTableCatalogWhere      SQLIdentifierField = "table_catalog"
	TableConstraintTableSchemaWhere       SQLIdentifierField = "table_schema"
	TableConstraintTableNameWhere         SQLIdentifierField = "table_name"
	TableConstraintConstraintTypeWhere    CharacterDataField = "constraint_type"
	TableConstraintIsDeferrableWhere      YesOrNoField       = "is_deferrable"
	TableConstraintInitiallyDeferredWhere YesOrNoField       = "initially_deferred"
)

// QueryOneTableConstraint retrieves a row from 'information_schema.table_constraints' as a TableConstraint.
func QueryOneTableConstraint(db XODB, where WhereClause, order OrderBy) (*TableConstraint, error) {
	const origsqlstr = `SELECT ` +
		`constraint_catalog, constraint_schema, constraint_name, table_catalog, table_schema, table_name, constraint_type, is_deferrable, initially_deferred ` +
		`FROM information_schema.table_constraints WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String() + " LIMIT 1"

	tc := &TableConstraint{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&tc.ConstraintCatalog, &tc.ConstraintSchema, &tc.ConstraintName, &tc.TableCatalog, &tc.TableSchema, &tc.TableName, &tc.ConstraintType, &tc.IsDeferrable, &tc.InitiallyDeferred)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return tc, nil
}

// QueryTableConstraint retrieves rows from 'information_schema.table_constraints' as a slice of TableConstraint.
func QueryTableConstraint(db XODB, where WhereClause, order OrderBy) ([]*TableConstraint, error) {
	const origsqlstr = `SELECT ` +
		`constraint_catalog, constraint_schema, constraint_name, table_catalog, table_schema, table_name, constraint_type, is_deferrable, initially_deferred ` +
		`FROM information_schema.table_constraints WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String()

	var vals []*TableConstraint
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		tc := TableConstraint{}

		err = q.Scan(&tc.ConstraintCatalog, &tc.ConstraintSchema, &tc.ConstraintName, &tc.TableCatalog, &tc.TableSchema, &tc.TableName, &tc.ConstraintType, &tc.IsDeferrable, &tc.InitiallyDeferred)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &tc)
	}
	return vals, nil
}

// AllTableConstraint retrieves all rows from 'information_schema.table_constraints' as a slice of TableConstraint.
func AllTableConstraint(db XODB, order OrderBy) ([]*TableConstraint, error) {
	const origsqlstr = `SELECT ` +
		`constraint_catalog, constraint_schema, constraint_name, table_catalog, table_schema, table_name, constraint_type, is_deferrable, initially_deferred ` +
		`FROM information_schema.table_constraints`

	sqlstr := origsqlstr + order.String()

	var vals []*TableConstraint
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		tc := TableConstraint{}

		err = q.Scan(&tc.ConstraintCatalog, &tc.ConstraintSchema, &tc.ConstraintName, &tc.TableCatalog, &tc.TableSchema, &tc.TableName, &tc.ConstraintType, &tc.IsDeferrable, &tc.InitiallyDeferred)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &tc)
	}
	return vals, nil
}
