// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// TablePrivilegeTable is the database name for the table.
const TablePrivilegeTable = "information_schema.table_privileges"

// TablePrivilege represents a row from 'information_schema.table_privileges'.
type TablePrivilege struct {
	Grantor       SQLIdentifier `yaml:"grantor,omitempty"`        // grantor
	Grantee       SQLIdentifier `yaml:"grantee,omitempty"`        // grantee
	TableCatalog  SQLIdentifier `yaml:"table_catalog,omitempty"`  // table_catalog
	TableSchema   SQLIdentifier `yaml:"table_schema,omitempty"`   // table_schema
	TableName     SQLIdentifier `yaml:"table_name,omitempty"`     // table_name
	PrivilegeType CharacterData `yaml:"privilege_type,omitempty"` // privilege_type
	IsGrantable   YesOrNo       `yaml:"is_grantable,omitempty"`   // is_grantable
	WithHierarchy YesOrNo       `yaml:"with_hierarchy,omitempty"` // with_hierarchy
}

// Constants defining each column in the table.
const (
	TablePrivilegeGrantorField       = "grantor"
	TablePrivilegeGranteeField       = "grantee"
	TablePrivilegeTableCatalogField  = "table_catalog"
	TablePrivilegeTableSchemaField   = "table_schema"
	TablePrivilegeTableNameField     = "table_name"
	TablePrivilegePrivilegeTypeField = "privilege_type"
	TablePrivilegeIsGrantableField   = "is_grantable"
	TablePrivilegeWithHierarchyField = "with_hierarchy"
)

// WhereClauses for every type in TablePrivilege.
var (
	TablePrivilegeGrantorWhere       SQLIdentifierField = "grantor"
	TablePrivilegeGranteeWhere       SQLIdentifierField = "grantee"
	TablePrivilegeTableCatalogWhere  SQLIdentifierField = "table_catalog"
	TablePrivilegeTableSchemaWhere   SQLIdentifierField = "table_schema"
	TablePrivilegeTableNameWhere     SQLIdentifierField = "table_name"
	TablePrivilegePrivilegeTypeWhere CharacterDataField = "privilege_type"
	TablePrivilegeIsGrantableWhere   YesOrNoField       = "is_grantable"
	TablePrivilegeWithHierarchyWhere YesOrNoField       = "with_hierarchy"
)

// QueryOneTablePrivilege retrieves a row from 'information_schema.table_privileges' as a TablePrivilege.
func QueryOneTablePrivilege(db XODB, where WhereClause, order OrderBy) (*TablePrivilege, error) {
	const origsqlstr = `SELECT ` +
		`grantor, grantee, table_catalog, table_schema, table_name, privilege_type, is_grantable, with_hierarchy ` +
		`FROM information_schema.table_privileges WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String() + " LIMIT 1"

	tp := &TablePrivilege{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&tp.Grantor, &tp.Grantee, &tp.TableCatalog, &tp.TableSchema, &tp.TableName, &tp.PrivilegeType, &tp.IsGrantable, &tp.WithHierarchy)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return tp, nil
}

// QueryTablePrivilege retrieves rows from 'information_schema.table_privileges' as a slice of TablePrivilege.
func QueryTablePrivilege(db XODB, where WhereClause, order OrderBy) ([]*TablePrivilege, error) {
	const origsqlstr = `SELECT ` +
		`grantor, grantee, table_catalog, table_schema, table_name, privilege_type, is_grantable, with_hierarchy ` +
		`FROM information_schema.table_privileges WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String()

	var vals []*TablePrivilege
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		tp := TablePrivilege{}

		err = q.Scan(&tp.Grantor, &tp.Grantee, &tp.TableCatalog, &tp.TableSchema, &tp.TableName, &tp.PrivilegeType, &tp.IsGrantable, &tp.WithHierarchy)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &tp)
	}
	return vals, nil
}

// AllTablePrivilege retrieves all rows from 'information_schema.table_privileges' as a slice of TablePrivilege.
func AllTablePrivilege(db XODB, order OrderBy) ([]*TablePrivilege, error) {
	const origsqlstr = `SELECT ` +
		`grantor, grantee, table_catalog, table_schema, table_name, privilege_type, is_grantable, with_hierarchy ` +
		`FROM information_schema.table_privileges`

	sqlstr := origsqlstr + order.String()

	var vals []*TablePrivilege
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		tp := TablePrivilege{}

		err = q.Scan(&tp.Grantor, &tp.Grantee, &tp.TableCatalog, &tp.TableSchema, &tp.TableName, &tp.PrivilegeType, &tp.IsGrantable, &tp.WithHierarchy)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &tp)
	}
	return vals, nil
}
