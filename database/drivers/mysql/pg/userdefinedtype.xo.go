// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// UserDefinedTypeTable is the database name for the table.
const UserDefinedTypeTable = "information_schema.user_defined_types"

// UserDefinedType represents a row from 'information_schema.user_defined_types'.
type UserDefinedType struct {
	UserDefinedTypeCatalog  SQLIdentifier  `yaml:"user_defined_type_catalog,omitempty"`  // user_defined_type_catalog
	UserDefinedTypeSchema   SQLIdentifier  `yaml:"user_defined_type_schema,omitempty"`   // user_defined_type_schema
	UserDefinedTypeName     SQLIdentifier  `yaml:"user_defined_type_name,omitempty"`     // user_defined_type_name
	UserDefinedTypeCategory CharacterData  `yaml:"user_defined_type_category,omitempty"` // user_defined_type_category
	IsInstantiable          YesOrNo        `yaml:"is_instantiable,omitempty"`            // is_instantiable
	IsFinal                 YesOrNo        `yaml:"is_final,omitempty"`                   // is_final
	OrderingForm            CharacterData  `yaml:"ordering_form,omitempty"`              // ordering_form
	OrderingCategory        CharacterData  `yaml:"ordering_category,omitempty"`          // ordering_category
	OrderingRoutineCatalog  SQLIdentifier  `yaml:"ordering_routine_catalog,omitempty"`   // ordering_routine_catalog
	OrderingRoutineSchema   SQLIdentifier  `yaml:"ordering_routine_schema,omitempty"`    // ordering_routine_schema
	OrderingRoutineName     SQLIdentifier  `yaml:"ordering_routine_name,omitempty"`      // ordering_routine_name
	ReferenceType           CharacterData  `yaml:"reference_type,omitempty"`             // reference_type
	DataType                CharacterData  `yaml:"data_type,omitempty"`                  // data_type
	CharacterMaximumLength  CardinalNumber `yaml:"character_maximum_length,omitempty"`   // character_maximum_length
	CharacterOctetLength    CardinalNumber `yaml:"character_octet_length,omitempty"`     // character_octet_length
	CharacterSetCatalog     SQLIdentifier  `yaml:"character_set_catalog,omitempty"`      // character_set_catalog
	CharacterSetSchema      SQLIdentifier  `yaml:"character_set_schema,omitempty"`       // character_set_schema
	CharacterSetName        SQLIdentifier  `yaml:"character_set_name,omitempty"`         // character_set_name
	CollationCatalog        SQLIdentifier  `yaml:"collation_catalog,omitempty"`          // collation_catalog
	CollationSchema         SQLIdentifier  `yaml:"collation_schema,omitempty"`           // collation_schema
	CollationName           SQLIdentifier  `yaml:"collation_name,omitempty"`             // collation_name
	NumericPrecision        CardinalNumber `yaml:"numeric_precision,omitempty"`          // numeric_precision
	NumericPrecisionRadix   CardinalNumber `yaml:"numeric_precision_radix,omitempty"`    // numeric_precision_radix
	NumericScale            CardinalNumber `yaml:"numeric_scale,omitempty"`              // numeric_scale
	DatetimePrecision       CardinalNumber `yaml:"datetime_precision,omitempty"`         // datetime_precision
	IntervalType            CharacterData  `yaml:"interval_type,omitempty"`              // interval_type
	IntervalPrecision       CardinalNumber `yaml:"interval_precision,omitempty"`         // interval_precision
	SourceDtdIdentifier     SQLIdentifier  `yaml:"source_dtd_identifier,omitempty"`      // source_dtd_identifier
	RefDtdIdentifier        SQLIdentifier  `yaml:"ref_dtd_identifier,omitempty"`         // ref_dtd_identifier
}

// Constants defining each column in the table.
const (
	UserDefinedTypeUserDefinedTypeCatalogField  = "user_defined_type_catalog"
	UserDefinedTypeUserDefinedTypeSchemaField   = "user_defined_type_schema"
	UserDefinedTypeUserDefinedTypeNameField     = "user_defined_type_name"
	UserDefinedTypeUserDefinedTypeCategoryField = "user_defined_type_category"
	UserDefinedTypeIsInstantiableField          = "is_instantiable"
	UserDefinedTypeIsFinalField                 = "is_final"
	UserDefinedTypeOrderingFormField            = "ordering_form"
	UserDefinedTypeOrderingCategoryField        = "ordering_category"
	UserDefinedTypeOrderingRoutineCatalogField  = "ordering_routine_catalog"
	UserDefinedTypeOrderingRoutineSchemaField   = "ordering_routine_schema"
	UserDefinedTypeOrderingRoutineNameField     = "ordering_routine_name"
	UserDefinedTypeReferenceTypeField           = "reference_type"
	UserDefinedTypeDataTypeField                = "data_type"
	UserDefinedTypeCharacterMaximumLengthField  = "character_maximum_length"
	UserDefinedTypeCharacterOctetLengthField    = "character_octet_length"
	UserDefinedTypeCharacterSetCatalogField     = "character_set_catalog"
	UserDefinedTypeCharacterSetSchemaField      = "character_set_schema"
	UserDefinedTypeCharacterSetNameField        = "character_set_name"
	UserDefinedTypeCollationCatalogField        = "collation_catalog"
	UserDefinedTypeCollationSchemaField         = "collation_schema"
	UserDefinedTypeCollationNameField           = "collation_name"
	UserDefinedTypeNumericPrecisionField        = "numeric_precision"
	UserDefinedTypeNumericPrecisionRadixField   = "numeric_precision_radix"
	UserDefinedTypeNumericScaleField            = "numeric_scale"
	UserDefinedTypeDatetimePrecisionField       = "datetime_precision"
	UserDefinedTypeIntervalTypeField            = "interval_type"
	UserDefinedTypeIntervalPrecisionField       = "interval_precision"
	UserDefinedTypeSourceDtdIdentifierField     = "source_dtd_identifier"
	UserDefinedTypeRefDtdIdentifierField        = "ref_dtd_identifier"
)

// WhereClauses for every type in UserDefinedType.
var (
	UserDefinedTypeUserDefinedTypeCatalogWhere  SQLIdentifierField  = "user_defined_type_catalog"
	UserDefinedTypeUserDefinedTypeSchemaWhere   SQLIdentifierField  = "user_defined_type_schema"
	UserDefinedTypeUserDefinedTypeNameWhere     SQLIdentifierField  = "user_defined_type_name"
	UserDefinedTypeUserDefinedTypeCategoryWhere CharacterDataField  = "user_defined_type_category"
	UserDefinedTypeIsInstantiableWhere          YesOrNoField        = "is_instantiable"
	UserDefinedTypeIsFinalWhere                 YesOrNoField        = "is_final"
	UserDefinedTypeOrderingFormWhere            CharacterDataField  = "ordering_form"
	UserDefinedTypeOrderingCategoryWhere        CharacterDataField  = "ordering_category"
	UserDefinedTypeOrderingRoutineCatalogWhere  SQLIdentifierField  = "ordering_routine_catalog"
	UserDefinedTypeOrderingRoutineSchemaWhere   SQLIdentifierField  = "ordering_routine_schema"
	UserDefinedTypeOrderingRoutineNameWhere     SQLIdentifierField  = "ordering_routine_name"
	UserDefinedTypeReferenceTypeWhere           CharacterDataField  = "reference_type"
	UserDefinedTypeDataTypeWhere                CharacterDataField  = "data_type"
	UserDefinedTypeCharacterMaximumLengthWhere  CardinalNumberField = "character_maximum_length"
	UserDefinedTypeCharacterOctetLengthWhere    CardinalNumberField = "character_octet_length"
	UserDefinedTypeCharacterSetCatalogWhere     SQLIdentifierField  = "character_set_catalog"
	UserDefinedTypeCharacterSetSchemaWhere      SQLIdentifierField  = "character_set_schema"
	UserDefinedTypeCharacterSetNameWhere        SQLIdentifierField  = "character_set_name"
	UserDefinedTypeCollationCatalogWhere        SQLIdentifierField  = "collation_catalog"
	UserDefinedTypeCollationSchemaWhere         SQLIdentifierField  = "collation_schema"
	UserDefinedTypeCollationNameWhere           SQLIdentifierField  = "collation_name"
	UserDefinedTypeNumericPrecisionWhere        CardinalNumberField = "numeric_precision"
	UserDefinedTypeNumericPrecisionRadixWhere   CardinalNumberField = "numeric_precision_radix"
	UserDefinedTypeNumericScaleWhere            CardinalNumberField = "numeric_scale"
	UserDefinedTypeDatetimePrecisionWhere       CardinalNumberField = "datetime_precision"
	UserDefinedTypeIntervalTypeWhere            CharacterDataField  = "interval_type"
	UserDefinedTypeIntervalPrecisionWhere       CardinalNumberField = "interval_precision"
	UserDefinedTypeSourceDtdIdentifierWhere     SQLIdentifierField  = "source_dtd_identifier"
	UserDefinedTypeRefDtdIdentifierWhere        SQLIdentifierField  = "ref_dtd_identifier"
)

// QueryOneUserDefinedType retrieves a row from 'information_schema.user_defined_types' as a UserDefinedType.
func QueryOneUserDefinedType(db XODB, where WhereClause, order OrderBy) (*UserDefinedType, error) {
	const origsqlstr = `SELECT ` +
		`user_defined_type_catalog, user_defined_type_schema, user_defined_type_name, user_defined_type_category, is_instantiable, is_final, ordering_form, ordering_category, ordering_routine_catalog, ordering_routine_schema, ordering_routine_name, reference_type, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, source_dtd_identifier, ref_dtd_identifier ` +
		`FROM information_schema.user_defined_types WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String() + " LIMIT 1"

	udt := &UserDefinedType{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&udt.UserDefinedTypeCatalog, &udt.UserDefinedTypeSchema, &udt.UserDefinedTypeName, &udt.UserDefinedTypeCategory, &udt.IsInstantiable, &udt.IsFinal, &udt.OrderingForm, &udt.OrderingCategory, &udt.OrderingRoutineCatalog, &udt.OrderingRoutineSchema, &udt.OrderingRoutineName, &udt.ReferenceType, &udt.DataType, &udt.CharacterMaximumLength, &udt.CharacterOctetLength, &udt.CharacterSetCatalog, &udt.CharacterSetSchema, &udt.CharacterSetName, &udt.CollationCatalog, &udt.CollationSchema, &udt.CollationName, &udt.NumericPrecision, &udt.NumericPrecisionRadix, &udt.NumericScale, &udt.DatetimePrecision, &udt.IntervalType, &udt.IntervalPrecision, &udt.SourceDtdIdentifier, &udt.RefDtdIdentifier)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return udt, nil
}

// QueryUserDefinedType retrieves rows from 'information_schema.user_defined_types' as a slice of UserDefinedType.
func QueryUserDefinedType(db XODB, where WhereClause, order OrderBy) ([]*UserDefinedType, error) {
	const origsqlstr = `SELECT ` +
		`user_defined_type_catalog, user_defined_type_schema, user_defined_type_name, user_defined_type_category, is_instantiable, is_final, ordering_form, ordering_category, ordering_routine_catalog, ordering_routine_schema, ordering_routine_name, reference_type, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, source_dtd_identifier, ref_dtd_identifier ` +
		`FROM information_schema.user_defined_types WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String()

	var vals []*UserDefinedType
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		udt := UserDefinedType{}

		err = q.Scan(&udt.UserDefinedTypeCatalog, &udt.UserDefinedTypeSchema, &udt.UserDefinedTypeName, &udt.UserDefinedTypeCategory, &udt.IsInstantiable, &udt.IsFinal, &udt.OrderingForm, &udt.OrderingCategory, &udt.OrderingRoutineCatalog, &udt.OrderingRoutineSchema, &udt.OrderingRoutineName, &udt.ReferenceType, &udt.DataType, &udt.CharacterMaximumLength, &udt.CharacterOctetLength, &udt.CharacterSetCatalog, &udt.CharacterSetSchema, &udt.CharacterSetName, &udt.CollationCatalog, &udt.CollationSchema, &udt.CollationName, &udt.NumericPrecision, &udt.NumericPrecisionRadix, &udt.NumericScale, &udt.DatetimePrecision, &udt.IntervalType, &udt.IntervalPrecision, &udt.SourceDtdIdentifier, &udt.RefDtdIdentifier)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &udt)
	}
	return vals, nil
}

// AllUserDefinedType retrieves all rows from 'information_schema.user_defined_types' as a slice of UserDefinedType.
func AllUserDefinedType(db XODB, order OrderBy) ([]*UserDefinedType, error) {
	const origsqlstr = `SELECT ` +
		`user_defined_type_catalog, user_defined_type_schema, user_defined_type_name, user_defined_type_category, is_instantiable, is_final, ordering_form, ordering_category, ordering_routine_catalog, ordering_routine_schema, ordering_routine_name, reference_type, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, source_dtd_identifier, ref_dtd_identifier ` +
		`FROM information_schema.user_defined_types`

	sqlstr := origsqlstr + order.String()

	var vals []*UserDefinedType
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		udt := UserDefinedType{}

		err = q.Scan(&udt.UserDefinedTypeCatalog, &udt.UserDefinedTypeSchema, &udt.UserDefinedTypeName, &udt.UserDefinedTypeCategory, &udt.IsInstantiable, &udt.IsFinal, &udt.OrderingForm, &udt.OrderingCategory, &udt.OrderingRoutineCatalog, &udt.OrderingRoutineSchema, &udt.OrderingRoutineName, &udt.ReferenceType, &udt.DataType, &udt.CharacterMaximumLength, &udt.CharacterOctetLength, &udt.CharacterSetCatalog, &udt.CharacterSetSchema, &udt.CharacterSetName, &udt.CollationCatalog, &udt.CollationSchema, &udt.CollationName, &udt.NumericPrecision, &udt.NumericPrecisionRadix, &udt.NumericScale, &udt.DatetimePrecision, &udt.IntervalType, &udt.IntervalPrecision, &udt.SourceDtdIdentifier, &udt.RefDtdIdentifier)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &udt)
	}
	return vals, nil
}
