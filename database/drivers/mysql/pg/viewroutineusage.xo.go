// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// ViewRoutineUsageTable is the database name for the table.
const ViewRoutineUsageTable = "information_schema.view_routine_usage"

// ViewRoutineUsage represents a row from 'information_schema.view_routine_usage'.
type ViewRoutineUsage struct {
	TableCatalog    SQLIdentifier `yaml:"table_catalog,omitempty"`    // table_catalog
	TableSchema     SQLIdentifier `yaml:"table_schema,omitempty"`     // table_schema
	TableName       SQLIdentifier `yaml:"table_name,omitempty"`       // table_name
	SpecificCatalog SQLIdentifier `yaml:"specific_catalog,omitempty"` // specific_catalog
	SpecificSchema  SQLIdentifier `yaml:"specific_schema,omitempty"`  // specific_schema
	SpecificName    SQLIdentifier `yaml:"specific_name,omitempty"`    // specific_name
}

// Constants defining each column in the table.
const (
	ViewRoutineUsageTableCatalogField    = "table_catalog"
	ViewRoutineUsageTableSchemaField     = "table_schema"
	ViewRoutineUsageTableNameField       = "table_name"
	ViewRoutineUsageSpecificCatalogField = "specific_catalog"
	ViewRoutineUsageSpecificSchemaField  = "specific_schema"
	ViewRoutineUsageSpecificNameField    = "specific_name"
)

// WhereClauses for every type in ViewRoutineUsage.
var (
	ViewRoutineUsageTableCatalogWhere    SQLIdentifierField = "table_catalog"
	ViewRoutineUsageTableSchemaWhere     SQLIdentifierField = "table_schema"
	ViewRoutineUsageTableNameWhere       SQLIdentifierField = "table_name"
	ViewRoutineUsageSpecificCatalogWhere SQLIdentifierField = "specific_catalog"
	ViewRoutineUsageSpecificSchemaWhere  SQLIdentifierField = "specific_schema"
	ViewRoutineUsageSpecificNameWhere    SQLIdentifierField = "specific_name"
)

// QueryOneViewRoutineUsage retrieves a row from 'information_schema.view_routine_usage' as a ViewRoutineUsage.
func QueryOneViewRoutineUsage(db XODB, where WhereClause, order OrderBy) (*ViewRoutineUsage, error) {
	const origsqlstr = `SELECT ` +
		`table_catalog, table_schema, table_name, specific_catalog, specific_schema, specific_name ` +
		`FROM information_schema.view_routine_usage WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String() + " LIMIT 1"

	vru := &ViewRoutineUsage{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&vru.TableCatalog, &vru.TableSchema, &vru.TableName, &vru.SpecificCatalog, &vru.SpecificSchema, &vru.SpecificName)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return vru, nil
}

// QueryViewRoutineUsage retrieves rows from 'information_schema.view_routine_usage' as a slice of ViewRoutineUsage.
func QueryViewRoutineUsage(db XODB, where WhereClause, order OrderBy) ([]*ViewRoutineUsage, error) {
	const origsqlstr = `SELECT ` +
		`table_catalog, table_schema, table_name, specific_catalog, specific_schema, specific_name ` +
		`FROM information_schema.view_routine_usage WHERE (`

	
	sqlstr := origsqlstr + where.String() + ") " + order.String()

	var vals []*ViewRoutineUsage
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		vru := ViewRoutineUsage{}

		err = q.Scan(&vru.TableCatalog, &vru.TableSchema, &vru.TableName, &vru.SpecificCatalog, &vru.SpecificSchema, &vru.SpecificName)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &vru)
	}
	return vals, nil
}

// AllViewRoutineUsage retrieves all rows from 'information_schema.view_routine_usage' as a slice of ViewRoutineUsage.
func AllViewRoutineUsage(db XODB, order OrderBy) ([]*ViewRoutineUsage, error) {
	const origsqlstr = `SELECT ` +
		`table_catalog, table_schema, table_name, specific_catalog, specific_schema, specific_name ` +
		`FROM information_schema.view_routine_usage`

	sqlstr := origsqlstr + order.String()

	var vals []*ViewRoutineUsage
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		vru := ViewRoutineUsage{}

		err = q.Scan(&vru.TableCatalog, &vru.TableSchema, &vru.TableName, &vru.SpecificCatalog, &vru.SpecificSchema, &vru.SpecificName)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &vru)
	}
	return vals, nil
}
