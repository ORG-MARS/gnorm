// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// ConstraintColumnUsageTable is the database name for the table.
const ConstraintColumnUsageTable = "information_schema.constraint_column_usage"

// ConstraintColumnUsage represents a row from 'information_schema.constraint_column_usage'.
type ConstraintColumnUsage struct {
	TableCatalog      SQLIdentifier `yaml:"table_catalog,omitempty"`      // table_catalog
	TableSchema       SQLIdentifier `yaml:"table_schema,omitempty"`       // table_schema
	TableName         SQLIdentifier `yaml:"table_name,omitempty"`         // table_name
	ColumnName        SQLIdentifier `yaml:"column_name,omitempty"`        // column_name
	ConstraintCatalog SQLIdentifier `yaml:"constraint_catalog,omitempty"` // constraint_catalog
	ConstraintSchema  SQLIdentifier `yaml:"constraint_schema,omitempty"`  // constraint_schema
	ConstraintName    SQLIdentifier `yaml:"constraint_name,omitempty"`    // constraint_name
}

// Constants defining each column in the table.
const (
	ConstraintColumnUsageTableCatalogField      = "table_catalog"
	ConstraintColumnUsageTableSchemaField       = "table_schema"
	ConstraintColumnUsageTableNameField         = "table_name"
	ConstraintColumnUsageColumnNameField        = "column_name"
	ConstraintColumnUsageConstraintCatalogField = "constraint_catalog"
	ConstraintColumnUsageConstraintSchemaField  = "constraint_schema"
	ConstraintColumnUsageConstraintNameField    = "constraint_name"
)

// WhereClauses for every type in ConstraintColumnUsage.
var (
	ConstraintColumnUsageTableCatalogWhere      SQLIdentifierField = "table_catalog"
	ConstraintColumnUsageTableSchemaWhere       SQLIdentifierField = "table_schema"
	ConstraintColumnUsageTableNameWhere         SQLIdentifierField = "table_name"
	ConstraintColumnUsageColumnNameWhere        SQLIdentifierField = "column_name"
	ConstraintColumnUsageConstraintCatalogWhere SQLIdentifierField = "constraint_catalog"
	ConstraintColumnUsageConstraintSchemaWhere  SQLIdentifierField = "constraint_schema"
	ConstraintColumnUsageConstraintNameWhere    SQLIdentifierField = "constraint_name"
)

// QueryOneConstraintColumnUsage retrieves a row from 'information_schema.constraint_column_usage' as a ConstraintColumnUsage.
func QueryOneConstraintColumnUsage(db XODB, where WhereClause, order OrderBy) (*ConstraintColumnUsage, error) {
	const origsqlstr = `SELECT ` +
		`table_catalog, table_schema, table_name, column_name, constraint_catalog, constraint_schema, constraint_name ` +
		`FROM information_schema.constraint_column_usage WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	ccu := &ConstraintColumnUsage{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&ccu.TableCatalog, &ccu.TableSchema, &ccu.TableName, &ccu.ColumnName, &ccu.ConstraintCatalog, &ccu.ConstraintSchema, &ccu.ConstraintName)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return ccu, nil
}

// QueryConstraintColumnUsage retrieves rows from 'information_schema.constraint_column_usage' as a slice of ConstraintColumnUsage.
func QueryConstraintColumnUsage(db XODB, where WhereClause, order OrderBy) ([]*ConstraintColumnUsage, error) {
	const origsqlstr = `SELECT ` +
		`table_catalog, table_schema, table_name, column_name, constraint_catalog, constraint_schema, constraint_name ` +
		`FROM information_schema.constraint_column_usage WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*ConstraintColumnUsage
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		ccu := ConstraintColumnUsage{}

		err = q.Scan(&ccu.TableCatalog, &ccu.TableSchema, &ccu.TableName, &ccu.ColumnName, &ccu.ConstraintCatalog, &ccu.ConstraintSchema, &ccu.ConstraintName)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &ccu)
	}
	return vals, nil
}

// AllConstraintColumnUsage retrieves all rows from 'information_schema.constraint_column_usage' as a slice of ConstraintColumnUsage.
func AllConstraintColumnUsage(db XODB, order OrderBy) ([]*ConstraintColumnUsage, error) {
	const origsqlstr = `SELECT ` +
		`table_catalog, table_schema, table_name, column_name, constraint_catalog, constraint_schema, constraint_name ` +
		`FROM information_schema.constraint_column_usage`

	sqlstr := origsqlstr + order.String()

	var vals []*ConstraintColumnUsage
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		ccu := ConstraintColumnUsage{}

		err = q.Scan(&ccu.TableCatalog, &ccu.TableSchema, &ccu.TableName, &ccu.ColumnName, &ccu.ConstraintCatalog, &ccu.ConstraintSchema, &ccu.ConstraintName)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &ccu)
	}
	return vals, nil
}
