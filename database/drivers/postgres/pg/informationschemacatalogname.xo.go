// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// InformationSchemaCatalogNameTable is the database name for the table.
const InformationSchemaCatalogNameTable = "information_schema.information_schema_catalog_name"

// InformationSchemaCatalogName represents a row from 'information_schema.information_schema_catalog_name'.
type InformationSchemaCatalogName struct {
	CatalogName SQLIdentifier `yaml:"catalog_name,omitempty"` // catalog_name
}

// Constants defining each column in the table.
const (
	InformationSchemaCatalogNameCatalogNameField = "catalog_name"
)

// WhereClauses for every type in InformationSchemaCatalogName.
var (
	InformationSchemaCatalogNameCatalogNameWhere SQLIdentifierField = "catalog_name"
)

// QueryOneInformationSchemaCatalogName retrieves a row from 'information_schema.information_schema_catalog_name' as a InformationSchemaCatalogName.
func QueryOneInformationSchemaCatalogName(db XODB, where WhereClause, order OrderBy) (*InformationSchemaCatalogName, error) {
	const origsqlstr = `SELECT ` +
		`catalog_name ` +
		`FROM information_schema.information_schema_catalog_name WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	iscn := &InformationSchemaCatalogName{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&iscn.CatalogName)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return iscn, nil
}

// QueryInformationSchemaCatalogName retrieves rows from 'information_schema.information_schema_catalog_name' as a slice of InformationSchemaCatalogName.
func QueryInformationSchemaCatalogName(db XODB, where WhereClause, order OrderBy) ([]*InformationSchemaCatalogName, error) {
	const origsqlstr = `SELECT ` +
		`catalog_name ` +
		`FROM information_schema.information_schema_catalog_name WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*InformationSchemaCatalogName
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		iscn := InformationSchemaCatalogName{}

		err = q.Scan(&iscn.CatalogName)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &iscn)
	}
	return vals, nil
}

// AllInformationSchemaCatalogName retrieves all rows from 'information_schema.information_schema_catalog_name' as a slice of InformationSchemaCatalogName.
func AllInformationSchemaCatalogName(db XODB, order OrderBy) ([]*InformationSchemaCatalogName, error) {
	const origsqlstr = `SELECT ` +
		`catalog_name ` +
		`FROM information_schema.information_schema_catalog_name`

	sqlstr := origsqlstr + order.String()

	var vals []*InformationSchemaCatalogName
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		iscn := InformationSchemaCatalogName{}

		err = q.Scan(&iscn.CatalogName)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &iscn)
	}
	return vals, nil
}
