// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// SQLImplementationInfoTable is the database name for the table.
const SQLImplementationInfoTable = "information_schema.sql_implementation_info"

// SQLImplementationInfo represents a row from 'information_schema.sql_implementation_info'.
type SQLImplementationInfo struct {
	ImplementationInfoID   CharacterData  `yaml:"implementation_info_id,omitempty"`   // implementation_info_id
	ImplementationInfoName CharacterData  `yaml:"implementation_info_name,omitempty"` // implementation_info_name
	IntegerValue           CardinalNumber `yaml:"integer_value,omitempty"`            // integer_value
	CharacterValue         CharacterData  `yaml:"character_value,omitempty"`          // character_value
	Comments               CharacterData  `yaml:"comments,omitempty"`                 // comments
}

// Constants defining each column in the table.
const (
	SQLImplementationInfoImplementationInfoIDField   = "implementation_info_id"
	SQLImplementationInfoImplementationInfoNameField = "implementation_info_name"
	SQLImplementationInfoIntegerValueField           = "integer_value"
	SQLImplementationInfoCharacterValueField         = "character_value"
	SQLImplementationInfoCommentsField               = "comments"
)

// WhereClauses for every type in SQLImplementationInfo.
var (
	SQLImplementationInfoImplementationInfoIDWhere   CharacterDataField  = "implementation_info_id"
	SQLImplementationInfoImplementationInfoNameWhere CharacterDataField  = "implementation_info_name"
	SQLImplementationInfoIntegerValueWhere           CardinalNumberField = "integer_value"
	SQLImplementationInfoCharacterValueWhere         CharacterDataField  = "character_value"
	SQLImplementationInfoCommentsWhere               CharacterDataField  = "comments"
)

// QueryOneSQLImplementationInfo retrieves a row from 'information_schema.sql_implementation_info' as a SQLImplementationInfo.
func QueryOneSQLImplementationInfo(db XODB, where WhereClause, order OrderBy) (*SQLImplementationInfo, error) {
	const origsqlstr = `SELECT ` +
		`implementation_info_id, implementation_info_name, integer_value, character_value, comments ` +
		`FROM information_schema.sql_implementation_info WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	sii := &SQLImplementationInfo{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&sii.ImplementationInfoID, &sii.ImplementationInfoName, &sii.IntegerValue, &sii.CharacterValue, &sii.Comments)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return sii, nil
}

// QuerySQLImplementationInfo retrieves rows from 'information_schema.sql_implementation_info' as a slice of SQLImplementationInfo.
func QuerySQLImplementationInfo(db XODB, where WhereClause, order OrderBy) ([]*SQLImplementationInfo, error) {
	const origsqlstr = `SELECT ` +
		`implementation_info_id, implementation_info_name, integer_value, character_value, comments ` +
		`FROM information_schema.sql_implementation_info WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*SQLImplementationInfo
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		sii := SQLImplementationInfo{}

		err = q.Scan(&sii.ImplementationInfoID, &sii.ImplementationInfoName, &sii.IntegerValue, &sii.CharacterValue, &sii.Comments)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &sii)
	}
	return vals, nil
}

// AllSQLImplementationInfo retrieves all rows from 'information_schema.sql_implementation_info' as a slice of SQLImplementationInfo.
func AllSQLImplementationInfo(db XODB, order OrderBy) ([]*SQLImplementationInfo, error) {
	const origsqlstr = `SELECT ` +
		`implementation_info_id, implementation_info_name, integer_value, character_value, comments ` +
		`FROM information_schema.sql_implementation_info`

	sqlstr := origsqlstr + order.String()

	var vals []*SQLImplementationInfo
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		sii := SQLImplementationInfo{}

		err = q.Scan(&sii.ImplementationInfoID, &sii.ImplementationInfoName, &sii.IntegerValue, &sii.CharacterValue, &sii.Comments)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &sii)
	}
	return vals, nil
}
