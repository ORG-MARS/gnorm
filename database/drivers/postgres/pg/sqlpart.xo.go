// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// SQLPartTable is the database name for the table.
const SQLPartTable = "information_schema.sql_parts"

// SQLPart represents a row from 'information_schema.sql_parts'.
type SQLPart struct {
	FeatureID    CharacterData `yaml:"feature_id,omitempty"`     // feature_id
	FeatureName  CharacterData `yaml:"feature_name,omitempty"`   // feature_name
	IsSupported  YesOrNo       `yaml:"is_supported,omitempty"`   // is_supported
	IsVerifiedBy CharacterData `yaml:"is_verified_by,omitempty"` // is_verified_by
	Comments     CharacterData `yaml:"comments,omitempty"`       // comments
}

// Constants defining each column in the table.
const (
	SQLPartFeatureIDField    = "feature_id"
	SQLPartFeatureNameField  = "feature_name"
	SQLPartIsSupportedField  = "is_supported"
	SQLPartIsVerifiedByField = "is_verified_by"
	SQLPartCommentsField     = "comments"
)

// WhereClauses for every type in SQLPart.
var (
	SQLPartFeatureIDWhere    CharacterDataField = "feature_id"
	SQLPartFeatureNameWhere  CharacterDataField = "feature_name"
	SQLPartIsSupportedWhere  YesOrNoField       = "is_supported"
	SQLPartIsVerifiedByWhere CharacterDataField = "is_verified_by"
	SQLPartCommentsWhere     CharacterDataField = "comments"
)

// QueryOneSQLPart retrieves a row from 'information_schema.sql_parts' as a SQLPart.
func QueryOneSQLPart(db XODB, where WhereClause, order OrderBy) (*SQLPart, error) {
	const origsqlstr = `SELECT ` +
		`feature_id, feature_name, is_supported, is_verified_by, comments ` +
		`FROM information_schema.sql_parts WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	sp := &SQLPart{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&sp.FeatureID, &sp.FeatureName, &sp.IsSupported, &sp.IsVerifiedBy, &sp.Comments)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return sp, nil
}

// QuerySQLPart retrieves rows from 'information_schema.sql_parts' as a slice of SQLPart.
func QuerySQLPart(db XODB, where WhereClause, order OrderBy) ([]*SQLPart, error) {
	const origsqlstr = `SELECT ` +
		`feature_id, feature_name, is_supported, is_verified_by, comments ` +
		`FROM information_schema.sql_parts WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*SQLPart
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		sp := SQLPart{}

		err = q.Scan(&sp.FeatureID, &sp.FeatureName, &sp.IsSupported, &sp.IsVerifiedBy, &sp.Comments)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &sp)
	}
	return vals, nil
}

// AllSQLPart retrieves all rows from 'information_schema.sql_parts' as a slice of SQLPart.
func AllSQLPart(db XODB, order OrderBy) ([]*SQLPart, error) {
	const origsqlstr = `SELECT ` +
		`feature_id, feature_name, is_supported, is_verified_by, comments ` +
		`FROM information_schema.sql_parts`

	sqlstr := origsqlstr + order.String()

	var vals []*SQLPart
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		sp := SQLPart{}

		err = q.Scan(&sp.FeatureID, &sp.FeatureName, &sp.IsSupported, &sp.IsVerifiedBy, &sp.Comments)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &sp)
	}
	return vals, nil
}
