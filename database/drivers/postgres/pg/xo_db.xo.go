// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"time"

	"github.com/lib/pq"
	"github.com/lib/pq/hstore"
	uuid "github.com/satori/go.uuid"
)

// IntField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type IntField string

// Equals returns a WhereClause for this field.
func (f IntField) Equals(v int) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f IntField) GreaterThan(v int) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f IntField) LessThan(v int) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f IntField) GreaterOrEqual(v int) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f IntField) LessOrEqual(v int) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f IntField) NotEqual(v int) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f IntField) In(vals []int) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// HstoreField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type HstoreField string

// Equals returns a WhereClause for this field.
func (f HstoreField) Equals(v hstore.Hstore) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f HstoreField) GreaterThan(v hstore.Hstore) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f HstoreField) LessThan(v hstore.Hstore) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f HstoreField) GreaterOrEqual(v hstore.Hstore) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f HstoreField) LessOrEqual(v hstore.Hstore) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f HstoreField) NotEqual(v hstore.Hstore) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f HstoreField) In(vals []hstore.Hstore) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// JsonbField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type JsonbField string

// Equals returns a WhereClause for this field.
func (f JsonbField) Equals(v Jsonb) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f JsonbField) GreaterThan(v Jsonb) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f JsonbField) LessThan(v Jsonb) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f JsonbField) GreaterOrEqual(v Jsonb) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f JsonbField) LessOrEqual(v Jsonb) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f JsonbField) NotEqual(v Jsonb) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f JsonbField) In(vals []Jsonb) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// StringField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type StringField string

// Equals returns a WhereClause for this field.
func (f StringField) Equals(v string) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f StringField) GreaterThan(v string) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f StringField) LessThan(v string) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f StringField) GreaterOrEqual(v string) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f StringField) LessOrEqual(v string) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f StringField) NotEqual(v string) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f StringField) In(vals []string) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// NullStringField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type NullStringField string

// Equals returns a WhereClause for this field.
func (f NullStringField) Equals(v sql.NullString) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f NullStringField) GreaterThan(v sql.NullString) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f NullStringField) LessThan(v sql.NullString) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f NullStringField) GreaterOrEqual(v sql.NullString) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f NullStringField) LessOrEqual(v sql.NullString) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f NullStringField) NotEqual(v sql.NullString) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f NullStringField) In(vals []sql.NullString) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// Int64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type Int64Field string

// Equals returns a WhereClause for this field.
func (f Int64Field) Equals(v int64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f Int64Field) GreaterThan(v int64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f Int64Field) LessThan(v int64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f Int64Field) GreaterOrEqual(v int64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f Int64Field) LessOrEqual(v int64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f Int64Field) NotEqual(v int64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f Int64Field) In(vals []int64) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// NullInt64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type NullInt64Field string

// Equals returns a WhereClause for this field.
func (f NullInt64Field) Equals(v sql.NullInt64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f NullInt64Field) GreaterThan(v sql.NullInt64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f NullInt64Field) LessThan(v sql.NullInt64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f NullInt64Field) GreaterOrEqual(v sql.NullInt64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f NullInt64Field) LessOrEqual(v sql.NullInt64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f NullInt64Field) NotEqual(v sql.NullInt64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f NullInt64Field) In(vals []sql.NullInt64) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// Float64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type Float64Field string

// Equals returns a WhereClause for this field.
func (f Float64Field) Equals(v float64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f Float64Field) GreaterThan(v float64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f Float64Field) LessThan(v float64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f Float64Field) GreaterOrEqual(v float64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f Float64Field) LessOrEqual(v float64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f Float64Field) NotEqual(v float64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f Float64Field) In(vals []float64) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// NullFloat64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type NullFloat64Field string

// Equals returns a WhereClause for this field.
func (f NullFloat64Field) Equals(v sql.NullFloat64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f NullFloat64Field) GreaterThan(v sql.NullFloat64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f NullFloat64Field) LessThan(v sql.NullFloat64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f NullFloat64Field) GreaterOrEqual(v sql.NullFloat64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f NullFloat64Field) LessOrEqual(v sql.NullFloat64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f NullFloat64Field) NotEqual(v sql.NullFloat64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f NullFloat64Field) In(vals []sql.NullFloat64) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// BoolField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type BoolField string

// Equals returns a WhereClause for this field.
func (f BoolField) Equals(v bool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f BoolField) GreaterThan(v bool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f BoolField) LessThan(v bool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f BoolField) GreaterOrEqual(v bool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f BoolField) LessOrEqual(v bool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f BoolField) NotEqual(v bool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f BoolField) In(vals []bool) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// NullBoolField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type NullBoolField string

// Equals returns a WhereClause for this field.
func (f NullBoolField) Equals(v sql.NullBool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f NullBoolField) GreaterThan(v sql.NullBool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f NullBoolField) LessThan(v sql.NullBool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f NullBoolField) GreaterOrEqual(v sql.NullBool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f NullBoolField) LessOrEqual(v sql.NullBool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f NullBoolField) NotEqual(v sql.NullBool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f NullBoolField) In(vals []sql.NullBool) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// TimeField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type TimeField string

// Equals returns a WhereClause for this field.
func (f TimeField) Equals(v time.Time) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f TimeField) GreaterThan(v time.Time) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f TimeField) LessThan(v time.Time) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f TimeField) GreaterOrEqual(v time.Time) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f TimeField) LessOrEqual(v time.Time) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f TimeField) NotEqual(v time.Time) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f TimeField) In(vals []time.Time) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// NullTimeField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type NullTimeField string

// Equals returns a WhereClause for this field.
func (f NullTimeField) Equals(v pq.NullTime) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f NullTimeField) GreaterThan(v pq.NullTime) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f NullTimeField) LessThan(v pq.NullTime) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f NullTimeField) GreaterOrEqual(v pq.NullTime) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f NullTimeField) LessOrEqual(v pq.NullTime) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f NullTimeField) NotEqual(v pq.NullTime) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f NullTimeField) In(vals []pq.NullTime) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// UUIDField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type UUIDField string

// Equals returns a WhereClause for this field.
func (f UUIDField) Equals(v uuid.UUID) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f UUIDField) GreaterThan(v uuid.UUID) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f UUIDField) LessThan(v uuid.UUID) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f UUIDField) GreaterOrEqual(v uuid.UUID) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f UUIDField) LessOrEqual(v uuid.UUID) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f UUIDField) NotEqual(v uuid.UUID) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f UUIDField) In(vals []uuid.UUID) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// NullUUIDField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type NullUUIDField string

// Equals returns a WhereClause for this field.
func (f NullUUIDField) Equals(v uuid.NullUUID) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f NullUUIDField) GreaterThan(v uuid.NullUUID) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f NullUUIDField) LessThan(v uuid.NullUUID) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f NullUUIDField) GreaterOrEqual(v uuid.NullUUID) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f NullUUIDField) LessOrEqual(v uuid.NullUUID) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f NullUUIDField) NotEqual(v uuid.NullUUID) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f NullUUIDField) In(vals []uuid.NullUUID) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// Uint32Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type Uint32Field string

// Equals returns a WhereClause for this field.
func (f Uint32Field) Equals(v uint32) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f Uint32Field) GreaterThan(v uint32) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f Uint32Field) LessThan(v uint32) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f Uint32Field) GreaterOrEqual(v uint32) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f Uint32Field) LessOrEqual(v uint32) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f Uint32Field) NotEqual(v uint32) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f Uint32Field) In(vals []uint32) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// YesOrNoField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type YesOrNoField string

// Equals returns a WhereClause for this field.
func (f YesOrNoField) Equals(v YesOrNo) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f YesOrNoField) GreaterThan(v YesOrNo) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f YesOrNoField) LessThan(v YesOrNo) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f YesOrNoField) GreaterOrEqual(v YesOrNo) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f YesOrNoField) LessOrEqual(v YesOrNo) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f YesOrNoField) NotEqual(v YesOrNo) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f YesOrNoField) In(vals []YesOrNo) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}
