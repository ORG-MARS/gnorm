// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// AttributeTable is the database name for the table.
const AttributeTable = "information_schema.attributes"

// Attribute represents a row from 'information_schema.attributes'.
type Attribute struct {
	UdtCatalog                  SQLIdentifier  `json:"udt_catalog"`                    // udt_catalog
	UdtSchema                   SQLIdentifier  `json:"udt_schema"`                     // udt_schema
	UdtName                     SQLIdentifier  `json:"udt_name"`                       // udt_name
	AttributeName               SQLIdentifier  `json:"attribute_name"`                 // attribute_name
	OrdinalPosition             CardinalNumber `json:"ordinal_position"`               // ordinal_position
	AttributeDefault            CharacterData  `json:"attribute_default"`              // attribute_default
	IsNullable                  YesOrNo        `json:"is_nullable"`                    // is_nullable
	DataType                    CharacterData  `json:"data_type"`                      // data_type
	CharacterMaximumLength      CardinalNumber `json:"character_maximum_length"`       // character_maximum_length
	CharacterOctetLength        CardinalNumber `json:"character_octet_length"`         // character_octet_length
	CharacterSetCatalog         SQLIdentifier  `json:"character_set_catalog"`          // character_set_catalog
	CharacterSetSchema          SQLIdentifier  `json:"character_set_schema"`           // character_set_schema
	CharacterSetName            SQLIdentifier  `json:"character_set_name"`             // character_set_name
	CollationCatalog            SQLIdentifier  `json:"collation_catalog"`              // collation_catalog
	CollationSchema             SQLIdentifier  `json:"collation_schema"`               // collation_schema
	CollationName               SQLIdentifier  `json:"collation_name"`                 // collation_name
	NumericPrecision            CardinalNumber `json:"numeric_precision"`              // numeric_precision
	NumericPrecisionRadix       CardinalNumber `json:"numeric_precision_radix"`        // numeric_precision_radix
	NumericScale                CardinalNumber `json:"numeric_scale"`                  // numeric_scale
	DatetimePrecision           CardinalNumber `json:"datetime_precision"`             // datetime_precision
	IntervalType                CharacterData  `json:"interval_type"`                  // interval_type
	IntervalPrecision           CardinalNumber `json:"interval_precision"`             // interval_precision
	AttributeUdtCatalog         SQLIdentifier  `json:"attribute_udt_catalog"`          // attribute_udt_catalog
	AttributeUdtSchema          SQLIdentifier  `json:"attribute_udt_schema"`           // attribute_udt_schema
	AttributeUdtName            SQLIdentifier  `json:"attribute_udt_name"`             // attribute_udt_name
	ScopeCatalog                SQLIdentifier  `json:"scope_catalog"`                  // scope_catalog
	ScopeSchema                 SQLIdentifier  `json:"scope_schema"`                   // scope_schema
	ScopeName                   SQLIdentifier  `json:"scope_name"`                     // scope_name
	MaximumCardinality          CardinalNumber `json:"maximum_cardinality"`            // maximum_cardinality
	DtdIdentifier               SQLIdentifier  `json:"dtd_identifier"`                 // dtd_identifier
	IsDerivedReferenceAttribute YesOrNo        `json:"is_derived_reference_attribute"` // is_derived_reference_attribute
}

// Constants defining each column in the table.
const (
	AttributeUdtCatalogField                  = "udt_catalog"
	AttributeUdtSchemaField                   = "udt_schema"
	AttributeUdtNameField                     = "udt_name"
	AttributeAttributeNameField               = "attribute_name"
	AttributeOrdinalPositionField             = "ordinal_position"
	AttributeAttributeDefaultField            = "attribute_default"
	AttributeIsNullableField                  = "is_nullable"
	AttributeDataTypeField                    = "data_type"
	AttributeCharacterMaximumLengthField      = "character_maximum_length"
	AttributeCharacterOctetLengthField        = "character_octet_length"
	AttributeCharacterSetCatalogField         = "character_set_catalog"
	AttributeCharacterSetSchemaField          = "character_set_schema"
	AttributeCharacterSetNameField            = "character_set_name"
	AttributeCollationCatalogField            = "collation_catalog"
	AttributeCollationSchemaField             = "collation_schema"
	AttributeCollationNameField               = "collation_name"
	AttributeNumericPrecisionField            = "numeric_precision"
	AttributeNumericPrecisionRadixField       = "numeric_precision_radix"
	AttributeNumericScaleField                = "numeric_scale"
	AttributeDatetimePrecisionField           = "datetime_precision"
	AttributeIntervalTypeField                = "interval_type"
	AttributeIntervalPrecisionField           = "interval_precision"
	AttributeAttributeUdtCatalogField         = "attribute_udt_catalog"
	AttributeAttributeUdtSchemaField          = "attribute_udt_schema"
	AttributeAttributeUdtNameField            = "attribute_udt_name"
	AttributeScopeCatalogField                = "scope_catalog"
	AttributeScopeSchemaField                 = "scope_schema"
	AttributeScopeNameField                   = "scope_name"
	AttributeMaximumCardinalityField          = "maximum_cardinality"
	AttributeDtdIdentifierField               = "dtd_identifier"
	AttributeIsDerivedReferenceAttributeField = "is_derived_reference_attribute"
)

// WhereClauses for every type in Attribute.
var (
	AttributeUdtCatalogWhere                  SQLIdentifierField  = "udt_catalog"
	AttributeUdtSchemaWhere                   SQLIdentifierField  = "udt_schema"
	AttributeUdtNameWhere                     SQLIdentifierField  = "udt_name"
	AttributeAttributeNameWhere               SQLIdentifierField  = "attribute_name"
	AttributeOrdinalPositionWhere             CardinalNumberField = "ordinal_position"
	AttributeAttributeDefaultWhere            CharacterDataField  = "attribute_default"
	AttributeIsNullableWhere                  YesOrNoField        = "is_nullable"
	AttributeDataTypeWhere                    CharacterDataField  = "data_type"
	AttributeCharacterMaximumLengthWhere      CardinalNumberField = "character_maximum_length"
	AttributeCharacterOctetLengthWhere        CardinalNumberField = "character_octet_length"
	AttributeCharacterSetCatalogWhere         SQLIdentifierField  = "character_set_catalog"
	AttributeCharacterSetSchemaWhere          SQLIdentifierField  = "character_set_schema"
	AttributeCharacterSetNameWhere            SQLIdentifierField  = "character_set_name"
	AttributeCollationCatalogWhere            SQLIdentifierField  = "collation_catalog"
	AttributeCollationSchemaWhere             SQLIdentifierField  = "collation_schema"
	AttributeCollationNameWhere               SQLIdentifierField  = "collation_name"
	AttributeNumericPrecisionWhere            CardinalNumberField = "numeric_precision"
	AttributeNumericPrecisionRadixWhere       CardinalNumberField = "numeric_precision_radix"
	AttributeNumericScaleWhere                CardinalNumberField = "numeric_scale"
	AttributeDatetimePrecisionWhere           CardinalNumberField = "datetime_precision"
	AttributeIntervalTypeWhere                CharacterDataField  = "interval_type"
	AttributeIntervalPrecisionWhere           CardinalNumberField = "interval_precision"
	AttributeAttributeUdtCatalogWhere         SQLIdentifierField  = "attribute_udt_catalog"
	AttributeAttributeUdtSchemaWhere          SQLIdentifierField  = "attribute_udt_schema"
	AttributeAttributeUdtNameWhere            SQLIdentifierField  = "attribute_udt_name"
	AttributeScopeCatalogWhere                SQLIdentifierField  = "scope_catalog"
	AttributeScopeSchemaWhere                 SQLIdentifierField  = "scope_schema"
	AttributeScopeNameWhere                   SQLIdentifierField  = "scope_name"
	AttributeMaximumCardinalityWhere          CardinalNumberField = "maximum_cardinality"
	AttributeDtdIdentifierWhere               SQLIdentifierField  = "dtd_identifier"
	AttributeIsDerivedReferenceAttributeWhere YesOrNoField        = "is_derived_reference_attribute"
)

// QueryOneAttribute retrieves a row from 'information_schema.attributes' as a Attribute.
func QueryOneAttribute(db XODB, where WhereClause, order OrderBy) (*Attribute, error) {
	const origsqlstr = `SELECT ` +
		`udt_catalog, udt_schema, udt_name, attribute_name, ordinal_position, attribute_default, is_nullable, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, attribute_udt_catalog, attribute_udt_schema, attribute_udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier, is_derived_reference_attribute ` +
		`FROM information_schema.attributes WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	a := &Attribute{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&a.UdtCatalog, &a.UdtSchema, &a.UdtName, &a.AttributeName, &a.OrdinalPosition, &a.AttributeDefault, &a.IsNullable, &a.DataType, &a.CharacterMaximumLength, &a.CharacterOctetLength, &a.CharacterSetCatalog, &a.CharacterSetSchema, &a.CharacterSetName, &a.CollationCatalog, &a.CollationSchema, &a.CollationName, &a.NumericPrecision, &a.NumericPrecisionRadix, &a.NumericScale, &a.DatetimePrecision, &a.IntervalType, &a.IntervalPrecision, &a.AttributeUdtCatalog, &a.AttributeUdtSchema, &a.AttributeUdtName, &a.ScopeCatalog, &a.ScopeSchema, &a.ScopeName, &a.MaximumCardinality, &a.DtdIdentifier, &a.IsDerivedReferenceAttribute)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return a, nil
}

// QueryAttribute retrieves rows from 'information_schema.attributes' as a slice of Attribute.
func QueryAttribute(db XODB, where WhereClause, order OrderBy) ([]*Attribute, error) {
	const origsqlstr = `SELECT ` +
		`udt_catalog, udt_schema, udt_name, attribute_name, ordinal_position, attribute_default, is_nullable, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, attribute_udt_catalog, attribute_udt_schema, attribute_udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier, is_derived_reference_attribute ` +
		`FROM information_schema.attributes WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*Attribute
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		a := Attribute{}

		err = q.Scan(&a.UdtCatalog, &a.UdtSchema, &a.UdtName, &a.AttributeName, &a.OrdinalPosition, &a.AttributeDefault, &a.IsNullable, &a.DataType, &a.CharacterMaximumLength, &a.CharacterOctetLength, &a.CharacterSetCatalog, &a.CharacterSetSchema, &a.CharacterSetName, &a.CollationCatalog, &a.CollationSchema, &a.CollationName, &a.NumericPrecision, &a.NumericPrecisionRadix, &a.NumericScale, &a.DatetimePrecision, &a.IntervalType, &a.IntervalPrecision, &a.AttributeUdtCatalog, &a.AttributeUdtSchema, &a.AttributeUdtName, &a.ScopeCatalog, &a.ScopeSchema, &a.ScopeName, &a.MaximumCardinality, &a.DtdIdentifier, &a.IsDerivedReferenceAttribute)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &a)
	}
	return vals, nil
}

// AllAttribute retrieves all rows from 'information_schema.attributes' as a slice of Attribute.
func AllAttribute(db XODB, order OrderBy) ([]*Attribute, error) {
	const origsqlstr = `SELECT ` +
		`udt_catalog, udt_schema, udt_name, attribute_name, ordinal_position, attribute_default, is_nullable, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, attribute_udt_catalog, attribute_udt_schema, attribute_udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier, is_derived_reference_attribute ` +
		`FROM information_schema.attributes`

	sqlstr := origsqlstr + order.String()

	var vals []*Attribute
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		a := Attribute{}

		err = q.Scan(&a.UdtCatalog, &a.UdtSchema, &a.UdtName, &a.AttributeName, &a.OrdinalPosition, &a.AttributeDefault, &a.IsNullable, &a.DataType, &a.CharacterMaximumLength, &a.CharacterOctetLength, &a.CharacterSetCatalog, &a.CharacterSetSchema, &a.CharacterSetName, &a.CollationCatalog, &a.CollationSchema, &a.CollationName, &a.NumericPrecision, &a.NumericPrecisionRadix, &a.NumericScale, &a.DatetimePrecision, &a.IntervalType, &a.IntervalPrecision, &a.AttributeUdtCatalog, &a.AttributeUdtSchema, &a.AttributeUdtName, &a.ScopeCatalog, &a.ScopeSchema, &a.ScopeName, &a.MaximumCardinality, &a.DtdIdentifier, &a.IsDerivedReferenceAttribute)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &a)
	}
	return vals, nil
}
