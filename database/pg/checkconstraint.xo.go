// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

// CheckConstraintTable is the database name for the table.
const CheckConstraintTable = "information_schema.check_constraints"

// CheckConstraint represents a row from 'information_schema.check_constraints'.
type CheckConstraint struct {
	ConstraintCatalog SQLIdentifier `json:"constraint_catalog"` // constraint_catalog
	ConstraintSchema  SQLIdentifier `json:"constraint_schema"`  // constraint_schema
	ConstraintName    SQLIdentifier `json:"constraint_name"`    // constraint_name
	CheckClause       CharacterData `json:"check_clause"`       // check_clause
}

// Constants defining each column in the table.
const (
	CheckConstraintConstraintCatalogField = "constraint_catalog"
	CheckConstraintConstraintSchemaField  = "constraint_schema"
	CheckConstraintConstraintNameField    = "constraint_name"
	CheckConstraintCheckClauseField       = "check_clause"
)

// WhereClauses for every type in CheckConstraint.
var (
	CheckConstraintConstraintCatalogWhere SQLIdentifierField = "constraint_catalog"
	CheckConstraintConstraintSchemaWhere  SQLIdentifierField = "constraint_schema"
	CheckConstraintConstraintNameWhere    SQLIdentifierField = "constraint_name"
	CheckConstraintCheckClauseWhere       CharacterDataField = "check_clause"
)

// QueryOneCheckConstraint retrieves a row from 'information_schema.check_constraints' as a CheckConstraint.
func QueryOneCheckConstraint(db XODB, where WhereClause, order OrderBy) (*CheckConstraint, error) {
	const origsqlstr = `SELECT ` +
		`constraint_catalog, constraint_schema, constraint_name, check_clause ` +
		`FROM information_schema.check_constraints WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	cc := &CheckConstraint{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&cc.ConstraintCatalog, &cc.ConstraintSchema, &cc.ConstraintName, &cc.CheckClause)
	if err != nil {
		return nil, err
	}
	return cc, nil
}

// QueryCheckConstraint retrieves rows from 'information_schema.check_constraints' as a slice of CheckConstraint.
func QueryCheckConstraint(db XODB, where WhereClause, order OrderBy) ([]*CheckConstraint, error) {
	const origsqlstr = `SELECT ` +
		`constraint_catalog, constraint_schema, constraint_name, check_clause ` +
		`FROM information_schema.check_constraints WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*CheckConstraint
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		cc := CheckConstraint{}

		err = q.Scan(&cc.ConstraintCatalog, &cc.ConstraintSchema, &cc.ConstraintName, &cc.CheckClause)
		if err != nil {
			return nil, err
		}

		vals = append(vals, &cc)
	}
	return vals, nil
}
