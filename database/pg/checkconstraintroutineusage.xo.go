// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// CheckConstraintRoutineUsageTable is the database name for the table.
const CheckConstraintRoutineUsageTable = "information_schema.check_constraint_routine_usage"

// CheckConstraintRoutineUsage represents a row from 'information_schema.check_constraint_routine_usage'.
type CheckConstraintRoutineUsage struct {
	ConstraintCatalog SQLIdentifier `json:"constraint_catalog"` // constraint_catalog
	ConstraintSchema  SQLIdentifier `json:"constraint_schema"`  // constraint_schema
	ConstraintName    SQLIdentifier `json:"constraint_name"`    // constraint_name
	SpecificCatalog   SQLIdentifier `json:"specific_catalog"`   // specific_catalog
	SpecificSchema    SQLIdentifier `json:"specific_schema"`    // specific_schema
	SpecificName      SQLIdentifier `json:"specific_name"`      // specific_name
}

// Constants defining each column in the table.
const (
	CheckConstraintRoutineUsageConstraintCatalogField = "constraint_catalog"
	CheckConstraintRoutineUsageConstraintSchemaField  = "constraint_schema"
	CheckConstraintRoutineUsageConstraintNameField    = "constraint_name"
	CheckConstraintRoutineUsageSpecificCatalogField   = "specific_catalog"
	CheckConstraintRoutineUsageSpecificSchemaField    = "specific_schema"
	CheckConstraintRoutineUsageSpecificNameField      = "specific_name"
)

// WhereClauses for every type in CheckConstraintRoutineUsage.
var (
	CheckConstraintRoutineUsageConstraintCatalogWhere SQLIdentifierField = "constraint_catalog"
	CheckConstraintRoutineUsageConstraintSchemaWhere  SQLIdentifierField = "constraint_schema"
	CheckConstraintRoutineUsageConstraintNameWhere    SQLIdentifierField = "constraint_name"
	CheckConstraintRoutineUsageSpecificCatalogWhere   SQLIdentifierField = "specific_catalog"
	CheckConstraintRoutineUsageSpecificSchemaWhere    SQLIdentifierField = "specific_schema"
	CheckConstraintRoutineUsageSpecificNameWhere      SQLIdentifierField = "specific_name"
)

// QueryOneCheckConstraintRoutineUsage retrieves a row from 'information_schema.check_constraint_routine_usage' as a CheckConstraintRoutineUsage.
func QueryOneCheckConstraintRoutineUsage(db XODB, where WhereClause, order OrderBy) (*CheckConstraintRoutineUsage, error) {
	const origsqlstr = `SELECT ` +
		`constraint_catalog, constraint_schema, constraint_name, specific_catalog, specific_schema, specific_name ` +
		`FROM information_schema.check_constraint_routine_usage WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	ccru := &CheckConstraintRoutineUsage{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&ccru.ConstraintCatalog, &ccru.ConstraintSchema, &ccru.ConstraintName, &ccru.SpecificCatalog, &ccru.SpecificSchema, &ccru.SpecificName)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return ccru, nil
}

// QueryCheckConstraintRoutineUsage retrieves rows from 'information_schema.check_constraint_routine_usage' as a slice of CheckConstraintRoutineUsage.
func QueryCheckConstraintRoutineUsage(db XODB, where WhereClause, order OrderBy) ([]*CheckConstraintRoutineUsage, error) {
	const origsqlstr = `SELECT ` +
		`constraint_catalog, constraint_schema, constraint_name, specific_catalog, specific_schema, specific_name ` +
		`FROM information_schema.check_constraint_routine_usage WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*CheckConstraintRoutineUsage
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		ccru := CheckConstraintRoutineUsage{}

		err = q.Scan(&ccru.ConstraintCatalog, &ccru.ConstraintSchema, &ccru.ConstraintName, &ccru.SpecificCatalog, &ccru.SpecificSchema, &ccru.SpecificName)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &ccru)
	}
	return vals, nil
}

// AllCheckConstraintRoutineUsage retrieves all rows from 'information_schema.check_constraint_routine_usage' as a slice of CheckConstraintRoutineUsage.
func AllCheckConstraintRoutineUsage(db XODB, order OrderBy) ([]*CheckConstraintRoutineUsage, error) {
	const origsqlstr = `SELECT ` +
		`constraint_catalog, constraint_schema, constraint_name, specific_catalog, specific_schema, specific_name ` +
		`FROM information_schema.check_constraint_routine_usage`

	sqlstr := origsqlstr + order.String()

	var vals []*CheckConstraintRoutineUsage
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		ccru := CheckConstraintRoutineUsage{}

		err = q.Scan(&ccru.ConstraintCatalog, &ccru.ConstraintSchema, &ccru.ConstraintName, &ccru.SpecificCatalog, &ccru.SpecificSchema, &ccru.SpecificName)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &ccru)
	}
	return vals, nil
}
