// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// ColumnDomainUsageTable is the database name for the table.
const ColumnDomainUsageTable = "information_schema.column_domain_usage"

// ColumnDomainUsage represents a row from 'information_schema.column_domain_usage'.
type ColumnDomainUsage struct {
	DomainCatalog SQLIdentifier `json:"domain_catalog"` // domain_catalog
	DomainSchema  SQLIdentifier `json:"domain_schema"`  // domain_schema
	DomainName    SQLIdentifier `json:"domain_name"`    // domain_name
	TableCatalog  SQLIdentifier `json:"table_catalog"`  // table_catalog
	TableSchema   SQLIdentifier `json:"table_schema"`   // table_schema
	TableName     SQLIdentifier `json:"table_name"`     // table_name
	ColumnName    SQLIdentifier `json:"column_name"`    // column_name
}

// Constants defining each column in the table.
const (
	ColumnDomainUsageDomainCatalogField = "domain_catalog"
	ColumnDomainUsageDomainSchemaField  = "domain_schema"
	ColumnDomainUsageDomainNameField    = "domain_name"
	ColumnDomainUsageTableCatalogField  = "table_catalog"
	ColumnDomainUsageTableSchemaField   = "table_schema"
	ColumnDomainUsageTableNameField     = "table_name"
	ColumnDomainUsageColumnNameField    = "column_name"
)

// WhereClauses for every type in ColumnDomainUsage.
var (
	ColumnDomainUsageDomainCatalogWhere SQLIdentifierField = "domain_catalog"
	ColumnDomainUsageDomainSchemaWhere  SQLIdentifierField = "domain_schema"
	ColumnDomainUsageDomainNameWhere    SQLIdentifierField = "domain_name"
	ColumnDomainUsageTableCatalogWhere  SQLIdentifierField = "table_catalog"
	ColumnDomainUsageTableSchemaWhere   SQLIdentifierField = "table_schema"
	ColumnDomainUsageTableNameWhere     SQLIdentifierField = "table_name"
	ColumnDomainUsageColumnNameWhere    SQLIdentifierField = "column_name"
)

// QueryOneColumnDomainUsage retrieves a row from 'information_schema.column_domain_usage' as a ColumnDomainUsage.
func QueryOneColumnDomainUsage(db XODB, where WhereClause, order OrderBy) (*ColumnDomainUsage, error) {
	const origsqlstr = `SELECT ` +
		`domain_catalog, domain_schema, domain_name, table_catalog, table_schema, table_name, column_name ` +
		`FROM information_schema.column_domain_usage WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	cdu := &ColumnDomainUsage{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&cdu.DomainCatalog, &cdu.DomainSchema, &cdu.DomainName, &cdu.TableCatalog, &cdu.TableSchema, &cdu.TableName, &cdu.ColumnName)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return cdu, nil
}

// QueryColumnDomainUsage retrieves rows from 'information_schema.column_domain_usage' as a slice of ColumnDomainUsage.
func QueryColumnDomainUsage(db XODB, where WhereClause, order OrderBy) ([]*ColumnDomainUsage, error) {
	const origsqlstr = `SELECT ` +
		`domain_catalog, domain_schema, domain_name, table_catalog, table_schema, table_name, column_name ` +
		`FROM information_schema.column_domain_usage WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*ColumnDomainUsage
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		cdu := ColumnDomainUsage{}

		err = q.Scan(&cdu.DomainCatalog, &cdu.DomainSchema, &cdu.DomainName, &cdu.TableCatalog, &cdu.TableSchema, &cdu.TableName, &cdu.ColumnName)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &cdu)
	}
	return vals, nil
}

// AllColumnDomainUsage retrieves all rows from 'information_schema.column_domain_usage' as a slice of ColumnDomainUsage.
func AllColumnDomainUsage(db XODB, order OrderBy) ([]*ColumnDomainUsage, error) {
	const origsqlstr = `SELECT ` +
		`domain_catalog, domain_schema, domain_name, table_catalog, table_schema, table_name, column_name ` +
		`FROM information_schema.column_domain_usage`

	sqlstr := origsqlstr + order.String()

	var vals []*ColumnDomainUsage
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		cdu := ColumnDomainUsage{}

		err = q.Scan(&cdu.DomainCatalog, &cdu.DomainSchema, &cdu.DomainName, &cdu.TableCatalog, &cdu.TableSchema, &cdu.TableName, &cdu.ColumnName)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &cdu)
	}
	return vals, nil
}
