// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// ColumnOptionTable is the database name for the table.
const ColumnOptionTable = "information_schema.column_options"

// ColumnOption represents a row from 'information_schema.column_options'.
type ColumnOption struct {
	TableCatalog SQLIdentifier `json:"table_catalog"` // table_catalog
	TableSchema  SQLIdentifier `json:"table_schema"`  // table_schema
	TableName    SQLIdentifier `json:"table_name"`    // table_name
	ColumnName   SQLIdentifier `json:"column_name"`   // column_name
	OptionName   SQLIdentifier `json:"option_name"`   // option_name
	OptionValue  CharacterData `json:"option_value"`  // option_value
}

// Constants defining each column in the table.
const (
	ColumnOptionTableCatalogField = "table_catalog"
	ColumnOptionTableSchemaField  = "table_schema"
	ColumnOptionTableNameField    = "table_name"
	ColumnOptionColumnNameField   = "column_name"
	ColumnOptionOptionNameField   = "option_name"
	ColumnOptionOptionValueField  = "option_value"
)

// WhereClauses for every type in ColumnOption.
var (
	ColumnOptionTableCatalogWhere SQLIdentifierField = "table_catalog"
	ColumnOptionTableSchemaWhere  SQLIdentifierField = "table_schema"
	ColumnOptionTableNameWhere    SQLIdentifierField = "table_name"
	ColumnOptionColumnNameWhere   SQLIdentifierField = "column_name"
	ColumnOptionOptionNameWhere   SQLIdentifierField = "option_name"
	ColumnOptionOptionValueWhere  CharacterDataField = "option_value"
)

// QueryOneColumnOption retrieves a row from 'information_schema.column_options' as a ColumnOption.
func QueryOneColumnOption(db XODB, where WhereClause, order OrderBy) (*ColumnOption, error) {
	const origsqlstr = `SELECT ` +
		`table_catalog, table_schema, table_name, column_name, option_name, option_value ` +
		`FROM information_schema.column_options WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	co := &ColumnOption{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&co.TableCatalog, &co.TableSchema, &co.TableName, &co.ColumnName, &co.OptionName, &co.OptionValue)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return co, nil
}

// QueryColumnOption retrieves rows from 'information_schema.column_options' as a slice of ColumnOption.
func QueryColumnOption(db XODB, where WhereClause, order OrderBy) ([]*ColumnOption, error) {
	const origsqlstr = `SELECT ` +
		`table_catalog, table_schema, table_name, column_name, option_name, option_value ` +
		`FROM information_schema.column_options WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*ColumnOption
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		co := ColumnOption{}

		err = q.Scan(&co.TableCatalog, &co.TableSchema, &co.TableName, &co.ColumnName, &co.OptionName, &co.OptionValue)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &co)
	}
	return vals, nil
}

// AllColumnOption retrieves all rows from 'information_schema.column_options' as a slice of ColumnOption.
func AllColumnOption(db XODB, order OrderBy) ([]*ColumnOption, error) {
	const origsqlstr = `SELECT ` +
		`table_catalog, table_schema, table_name, column_name, option_name, option_value ` +
		`FROM information_schema.column_options`

	sqlstr := origsqlstr + order.String()

	var vals []*ColumnOption
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		co := ColumnOption{}

		err = q.Scan(&co.TableCatalog, &co.TableSchema, &co.TableName, &co.ColumnName, &co.OptionName, &co.OptionValue)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &co)
	}
	return vals, nil
}
