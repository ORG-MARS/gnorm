// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

// DomainUdtUsageTable is the database name for the table.
const DomainUdtUsageTable = "information_schema.domain_udt_usage"

// DomainUdtUsage represents a row from 'information_schema.domain_udt_usage'.
type DomainUdtUsage struct {
	UdtCatalog    SQLIdentifier `json:"udt_catalog"`    // udt_catalog
	UdtSchema     SQLIdentifier `json:"udt_schema"`     // udt_schema
	UdtName       SQLIdentifier `json:"udt_name"`       // udt_name
	DomainCatalog SQLIdentifier `json:"domain_catalog"` // domain_catalog
	DomainSchema  SQLIdentifier `json:"domain_schema"`  // domain_schema
	DomainName    SQLIdentifier `json:"domain_name"`    // domain_name
}

// Constants defining each column in the table.
const (
	DomainUdtUsageUdtCatalogField    = "udt_catalog"
	DomainUdtUsageUdtSchemaField     = "udt_schema"
	DomainUdtUsageUdtNameField       = "udt_name"
	DomainUdtUsageDomainCatalogField = "domain_catalog"
	DomainUdtUsageDomainSchemaField  = "domain_schema"
	DomainUdtUsageDomainNameField    = "domain_name"
)

// WhereClauses for every type in DomainUdtUsage.
var (
	DomainUdtUsageUdtCatalogWhere    SQLIdentifierField = "udt_catalog"
	DomainUdtUsageUdtSchemaWhere     SQLIdentifierField = "udt_schema"
	DomainUdtUsageUdtNameWhere       SQLIdentifierField = "udt_name"
	DomainUdtUsageDomainCatalogWhere SQLIdentifierField = "domain_catalog"
	DomainUdtUsageDomainSchemaWhere  SQLIdentifierField = "domain_schema"
	DomainUdtUsageDomainNameWhere    SQLIdentifierField = "domain_name"
)

// QueryOneDomainUdtUsage retrieves a row from 'information_schema.domain_udt_usage' as a DomainUdtUsage.
func QueryOneDomainUdtUsage(db XODB, where WhereClause, order OrderBy) (*DomainUdtUsage, error) {
	const origsqlstr = `SELECT ` +
		`udt_catalog, udt_schema, udt_name, domain_catalog, domain_schema, domain_name ` +
		`FROM information_schema.domain_udt_usage WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	duu := &DomainUdtUsage{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&duu.UdtCatalog, &duu.UdtSchema, &duu.UdtName, &duu.DomainCatalog, &duu.DomainSchema, &duu.DomainName)
	if err != nil {
		return nil, err
	}
	return duu, nil
}

// QueryDomainUdtUsage retrieves rows from 'information_schema.domain_udt_usage' as a slice of DomainUdtUsage.
func QueryDomainUdtUsage(db XODB, where WhereClause, order OrderBy) ([]*DomainUdtUsage, error) {
	const origsqlstr = `SELECT ` +
		`udt_catalog, udt_schema, udt_name, domain_catalog, domain_schema, domain_name ` +
		`FROM information_schema.domain_udt_usage WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*DomainUdtUsage
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		duu := DomainUdtUsage{}

		err = q.Scan(&duu.UdtCatalog, &duu.UdtSchema, &duu.UdtName, &duu.DomainCatalog, &duu.DomainSchema, &duu.DomainName)
		if err != nil {
			return nil, err
		}

		vals = append(vals, &duu)
	}
	return vals, nil
}
