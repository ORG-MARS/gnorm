// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

// ElementTypeTable is the database name for the table.
const ElementTypeTable = "information_schema.element_types"

// ElementType represents a row from 'information_schema.element_types'.
type ElementType struct {
	ObjectCatalog            SQLIdentifier  `json:"object_catalog"`             // object_catalog
	ObjectSchema             SQLIdentifier  `json:"object_schema"`              // object_schema
	ObjectName               SQLIdentifier  `json:"object_name"`                // object_name
	ObjectType               CharacterData  `json:"object_type"`                // object_type
	CollectionTypeIdentifier SQLIdentifier  `json:"collection_type_identifier"` // collection_type_identifier
	DataType                 CharacterData  `json:"data_type"`                  // data_type
	CharacterMaximumLength   CardinalNumber `json:"character_maximum_length"`   // character_maximum_length
	CharacterOctetLength     CardinalNumber `json:"character_octet_length"`     // character_octet_length
	CharacterSetCatalog      SQLIdentifier  `json:"character_set_catalog"`      // character_set_catalog
	CharacterSetSchema       SQLIdentifier  `json:"character_set_schema"`       // character_set_schema
	CharacterSetName         SQLIdentifier  `json:"character_set_name"`         // character_set_name
	CollationCatalog         SQLIdentifier  `json:"collation_catalog"`          // collation_catalog
	CollationSchema          SQLIdentifier  `json:"collation_schema"`           // collation_schema
	CollationName            SQLIdentifier  `json:"collation_name"`             // collation_name
	NumericPrecision         CardinalNumber `json:"numeric_precision"`          // numeric_precision
	NumericPrecisionRadix    CardinalNumber `json:"numeric_precision_radix"`    // numeric_precision_radix
	NumericScale             CardinalNumber `json:"numeric_scale"`              // numeric_scale
	DatetimePrecision        CardinalNumber `json:"datetime_precision"`         // datetime_precision
	IntervalType             CharacterData  `json:"interval_type"`              // interval_type
	IntervalPrecision        CardinalNumber `json:"interval_precision"`         // interval_precision
	DomainDefault            CharacterData  `json:"domain_default"`             // domain_default
	UdtCatalog               SQLIdentifier  `json:"udt_catalog"`                // udt_catalog
	UdtSchema                SQLIdentifier  `json:"udt_schema"`                 // udt_schema
	UdtName                  SQLIdentifier  `json:"udt_name"`                   // udt_name
	ScopeCatalog             SQLIdentifier  `json:"scope_catalog"`              // scope_catalog
	ScopeSchema              SQLIdentifier  `json:"scope_schema"`               // scope_schema
	ScopeName                SQLIdentifier  `json:"scope_name"`                 // scope_name
	MaximumCardinality       CardinalNumber `json:"maximum_cardinality"`        // maximum_cardinality
	DtdIdentifier            SQLIdentifier  `json:"dtd_identifier"`             // dtd_identifier
}

// Constants defining each column in the table.
const (
	ElementTypeObjectCatalogField            = "object_catalog"
	ElementTypeObjectSchemaField             = "object_schema"
	ElementTypeObjectNameField               = "object_name"
	ElementTypeObjectTypeField               = "object_type"
	ElementTypeCollectionTypeIdentifierField = "collection_type_identifier"
	ElementTypeDataTypeField                 = "data_type"
	ElementTypeCharacterMaximumLengthField   = "character_maximum_length"
	ElementTypeCharacterOctetLengthField     = "character_octet_length"
	ElementTypeCharacterSetCatalogField      = "character_set_catalog"
	ElementTypeCharacterSetSchemaField       = "character_set_schema"
	ElementTypeCharacterSetNameField         = "character_set_name"
	ElementTypeCollationCatalogField         = "collation_catalog"
	ElementTypeCollationSchemaField          = "collation_schema"
	ElementTypeCollationNameField            = "collation_name"
	ElementTypeNumericPrecisionField         = "numeric_precision"
	ElementTypeNumericPrecisionRadixField    = "numeric_precision_radix"
	ElementTypeNumericScaleField             = "numeric_scale"
	ElementTypeDatetimePrecisionField        = "datetime_precision"
	ElementTypeIntervalTypeField             = "interval_type"
	ElementTypeIntervalPrecisionField        = "interval_precision"
	ElementTypeDomainDefaultField            = "domain_default"
	ElementTypeUdtCatalogField               = "udt_catalog"
	ElementTypeUdtSchemaField                = "udt_schema"
	ElementTypeUdtNameField                  = "udt_name"
	ElementTypeScopeCatalogField             = "scope_catalog"
	ElementTypeScopeSchemaField              = "scope_schema"
	ElementTypeScopeNameField                = "scope_name"
	ElementTypeMaximumCardinalityField       = "maximum_cardinality"
	ElementTypeDtdIdentifierField            = "dtd_identifier"
)

// WhereClauses for every type in ElementType.
var (
	ElementTypeObjectCatalogWhere            SQLIdentifierField  = "object_catalog"
	ElementTypeObjectSchemaWhere             SQLIdentifierField  = "object_schema"
	ElementTypeObjectNameWhere               SQLIdentifierField  = "object_name"
	ElementTypeObjectTypeWhere               CharacterDataField  = "object_type"
	ElementTypeCollectionTypeIdentifierWhere SQLIdentifierField  = "collection_type_identifier"
	ElementTypeDataTypeWhere                 CharacterDataField  = "data_type"
	ElementTypeCharacterMaximumLengthWhere   CardinalNumberField = "character_maximum_length"
	ElementTypeCharacterOctetLengthWhere     CardinalNumberField = "character_octet_length"
	ElementTypeCharacterSetCatalogWhere      SQLIdentifierField  = "character_set_catalog"
	ElementTypeCharacterSetSchemaWhere       SQLIdentifierField  = "character_set_schema"
	ElementTypeCharacterSetNameWhere         SQLIdentifierField  = "character_set_name"
	ElementTypeCollationCatalogWhere         SQLIdentifierField  = "collation_catalog"
	ElementTypeCollationSchemaWhere          SQLIdentifierField  = "collation_schema"
	ElementTypeCollationNameWhere            SQLIdentifierField  = "collation_name"
	ElementTypeNumericPrecisionWhere         CardinalNumberField = "numeric_precision"
	ElementTypeNumericPrecisionRadixWhere    CardinalNumberField = "numeric_precision_radix"
	ElementTypeNumericScaleWhere             CardinalNumberField = "numeric_scale"
	ElementTypeDatetimePrecisionWhere        CardinalNumberField = "datetime_precision"
	ElementTypeIntervalTypeWhere             CharacterDataField  = "interval_type"
	ElementTypeIntervalPrecisionWhere        CardinalNumberField = "interval_precision"
	ElementTypeDomainDefaultWhere            CharacterDataField  = "domain_default"
	ElementTypeUdtCatalogWhere               SQLIdentifierField  = "udt_catalog"
	ElementTypeUdtSchemaWhere                SQLIdentifierField  = "udt_schema"
	ElementTypeUdtNameWhere                  SQLIdentifierField  = "udt_name"
	ElementTypeScopeCatalogWhere             SQLIdentifierField  = "scope_catalog"
	ElementTypeScopeSchemaWhere              SQLIdentifierField  = "scope_schema"
	ElementTypeScopeNameWhere                SQLIdentifierField  = "scope_name"
	ElementTypeMaximumCardinalityWhere       CardinalNumberField = "maximum_cardinality"
	ElementTypeDtdIdentifierWhere            SQLIdentifierField  = "dtd_identifier"
)

// QueryOneElementType retrieves a row from 'information_schema.element_types' as a ElementType.
func QueryOneElementType(db XODB, where WhereClause, order OrderBy) (*ElementType, error) {
	const origsqlstr = `SELECT ` +
		`object_catalog, object_schema, object_name, object_type, collection_type_identifier, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, domain_default, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier ` +
		`FROM information_schema.element_types WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	et := &ElementType{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&et.ObjectCatalog, &et.ObjectSchema, &et.ObjectName, &et.ObjectType, &et.CollectionTypeIdentifier, &et.DataType, &et.CharacterMaximumLength, &et.CharacterOctetLength, &et.CharacterSetCatalog, &et.CharacterSetSchema, &et.CharacterSetName, &et.CollationCatalog, &et.CollationSchema, &et.CollationName, &et.NumericPrecision, &et.NumericPrecisionRadix, &et.NumericScale, &et.DatetimePrecision, &et.IntervalType, &et.IntervalPrecision, &et.DomainDefault, &et.UdtCatalog, &et.UdtSchema, &et.UdtName, &et.ScopeCatalog, &et.ScopeSchema, &et.ScopeName, &et.MaximumCardinality, &et.DtdIdentifier)
	if err != nil {
		return nil, err
	}
	return et, nil
}

// QueryElementType retrieves rows from 'information_schema.element_types' as a slice of ElementType.
func QueryElementType(db XODB, where WhereClause, order OrderBy) ([]*ElementType, error) {
	const origsqlstr = `SELECT ` +
		`object_catalog, object_schema, object_name, object_type, collection_type_identifier, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, domain_default, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier ` +
		`FROM information_schema.element_types WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*ElementType
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		et := ElementType{}

		err = q.Scan(&et.ObjectCatalog, &et.ObjectSchema, &et.ObjectName, &et.ObjectType, &et.CollectionTypeIdentifier, &et.DataType, &et.CharacterMaximumLength, &et.CharacterOctetLength, &et.CharacterSetCatalog, &et.CharacterSetSchema, &et.CharacterSetName, &et.CollationCatalog, &et.CollationSchema, &et.CollationName, &et.NumericPrecision, &et.NumericPrecisionRadix, &et.NumericScale, &et.DatetimePrecision, &et.IntervalType, &et.IntervalPrecision, &et.DomainDefault, &et.UdtCatalog, &et.UdtSchema, &et.UdtName, &et.ScopeCatalog, &et.ScopeSchema, &et.ScopeName, &et.MaximumCardinality, &et.DtdIdentifier)
		if err != nil {
			return nil, err
		}

		vals = append(vals, &et)
	}
	return vals, nil
}
