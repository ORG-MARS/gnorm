// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

// ForeignDataWrapperOptionTable is the database name for the table.
const ForeignDataWrapperOptionTable = "information_schema.foreign_data_wrapper_options"

// ForeignDataWrapperOption represents a row from 'information_schema.foreign_data_wrapper_options'.
type ForeignDataWrapperOption struct {
	ForeignDataWrapperCatalog SQLIdentifier `json:"foreign_data_wrapper_catalog"` // foreign_data_wrapper_catalog
	ForeignDataWrapperName    SQLIdentifier `json:"foreign_data_wrapper_name"`    // foreign_data_wrapper_name
	OptionName                SQLIdentifier `json:"option_name"`                  // option_name
	OptionValue               CharacterData `json:"option_value"`                 // option_value
}

// Constants defining each column in the table.
const (
	ForeignDataWrapperOptionForeignDataWrapperCatalogField = "foreign_data_wrapper_catalog"
	ForeignDataWrapperOptionForeignDataWrapperNameField    = "foreign_data_wrapper_name"
	ForeignDataWrapperOptionOptionNameField                = "option_name"
	ForeignDataWrapperOptionOptionValueField               = "option_value"
)

// WhereClauses for every type in ForeignDataWrapperOption.
var (
	ForeignDataWrapperOptionForeignDataWrapperCatalogWhere SQLIdentifierField = "foreign_data_wrapper_catalog"
	ForeignDataWrapperOptionForeignDataWrapperNameWhere    SQLIdentifierField = "foreign_data_wrapper_name"
	ForeignDataWrapperOptionOptionNameWhere                SQLIdentifierField = "option_name"
	ForeignDataWrapperOptionOptionValueWhere               CharacterDataField = "option_value"
)

// QueryOneForeignDataWrapperOption retrieves a row from 'information_schema.foreign_data_wrapper_options' as a ForeignDataWrapperOption.
func QueryOneForeignDataWrapperOption(db XODB, where WhereClause, order OrderBy) (*ForeignDataWrapperOption, error) {
	const origsqlstr = `SELECT ` +
		`foreign_data_wrapper_catalog, foreign_data_wrapper_name, option_name, option_value ` +
		`FROM information_schema.foreign_data_wrapper_options WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	fdwo := &ForeignDataWrapperOption{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&fdwo.ForeignDataWrapperCatalog, &fdwo.ForeignDataWrapperName, &fdwo.OptionName, &fdwo.OptionValue)
	if err != nil {
		return nil, err
	}
	return fdwo, nil
}

// QueryForeignDataWrapperOption retrieves rows from 'information_schema.foreign_data_wrapper_options' as a slice of ForeignDataWrapperOption.
func QueryForeignDataWrapperOption(db XODB, where WhereClause, order OrderBy) ([]*ForeignDataWrapperOption, error) {
	const origsqlstr = `SELECT ` +
		`foreign_data_wrapper_catalog, foreign_data_wrapper_name, option_name, option_value ` +
		`FROM information_schema.foreign_data_wrapper_options WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*ForeignDataWrapperOption
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		fdwo := ForeignDataWrapperOption{}

		err = q.Scan(&fdwo.ForeignDataWrapperCatalog, &fdwo.ForeignDataWrapperName, &fdwo.OptionName, &fdwo.OptionValue)
		if err != nil {
			return nil, err
		}

		vals = append(vals, &fdwo)
	}
	return vals, nil
}
