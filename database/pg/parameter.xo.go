// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// ParameterTable is the database name for the table.
const ParameterTable = "information_schema.parameters"

// Parameter represents a row from 'information_schema.parameters'.
type Parameter struct {
	SpecificCatalog        SQLIdentifier  `json:"specific_catalog"`         // specific_catalog
	SpecificSchema         SQLIdentifier  `json:"specific_schema"`          // specific_schema
	SpecificName           SQLIdentifier  `json:"specific_name"`            // specific_name
	OrdinalPosition        CardinalNumber `json:"ordinal_position"`         // ordinal_position
	ParameterMode          CharacterData  `json:"parameter_mode"`           // parameter_mode
	IsResult               YesOrNo        `json:"is_result"`                // is_result
	AsLocator              YesOrNo        `json:"as_locator"`               // as_locator
	ParameterName          SQLIdentifier  `json:"parameter_name"`           // parameter_name
	DataType               CharacterData  `json:"data_type"`                // data_type
	CharacterMaximumLength CardinalNumber `json:"character_maximum_length"` // character_maximum_length
	CharacterOctetLength   CardinalNumber `json:"character_octet_length"`   // character_octet_length
	CharacterSetCatalog    SQLIdentifier  `json:"character_set_catalog"`    // character_set_catalog
	CharacterSetSchema     SQLIdentifier  `json:"character_set_schema"`     // character_set_schema
	CharacterSetName       SQLIdentifier  `json:"character_set_name"`       // character_set_name
	CollationCatalog       SQLIdentifier  `json:"collation_catalog"`        // collation_catalog
	CollationSchema        SQLIdentifier  `json:"collation_schema"`         // collation_schema
	CollationName          SQLIdentifier  `json:"collation_name"`           // collation_name
	NumericPrecision       CardinalNumber `json:"numeric_precision"`        // numeric_precision
	NumericPrecisionRadix  CardinalNumber `json:"numeric_precision_radix"`  // numeric_precision_radix
	NumericScale           CardinalNumber `json:"numeric_scale"`            // numeric_scale
	DatetimePrecision      CardinalNumber `json:"datetime_precision"`       // datetime_precision
	IntervalType           CharacterData  `json:"interval_type"`            // interval_type
	IntervalPrecision      CardinalNumber `json:"interval_precision"`       // interval_precision
	UdtCatalog             SQLIdentifier  `json:"udt_catalog"`              // udt_catalog
	UdtSchema              SQLIdentifier  `json:"udt_schema"`               // udt_schema
	UdtName                SQLIdentifier  `json:"udt_name"`                 // udt_name
	ScopeCatalog           SQLIdentifier  `json:"scope_catalog"`            // scope_catalog
	ScopeSchema            SQLIdentifier  `json:"scope_schema"`             // scope_schema
	ScopeName              SQLIdentifier  `json:"scope_name"`               // scope_name
	MaximumCardinality     CardinalNumber `json:"maximum_cardinality"`      // maximum_cardinality
	DtdIdentifier          SQLIdentifier  `json:"dtd_identifier"`           // dtd_identifier
	ParameterDefault       CharacterData  `json:"parameter_default"`        // parameter_default
}

// Constants defining each column in the table.
const (
	ParameterSpecificCatalogField        = "specific_catalog"
	ParameterSpecificSchemaField         = "specific_schema"
	ParameterSpecificNameField           = "specific_name"
	ParameterOrdinalPositionField        = "ordinal_position"
	ParameterParameterModeField          = "parameter_mode"
	ParameterIsResultField               = "is_result"
	ParameterAsLocatorField              = "as_locator"
	ParameterParameterNameField          = "parameter_name"
	ParameterDataTypeField               = "data_type"
	ParameterCharacterMaximumLengthField = "character_maximum_length"
	ParameterCharacterOctetLengthField   = "character_octet_length"
	ParameterCharacterSetCatalogField    = "character_set_catalog"
	ParameterCharacterSetSchemaField     = "character_set_schema"
	ParameterCharacterSetNameField       = "character_set_name"
	ParameterCollationCatalogField       = "collation_catalog"
	ParameterCollationSchemaField        = "collation_schema"
	ParameterCollationNameField          = "collation_name"
	ParameterNumericPrecisionField       = "numeric_precision"
	ParameterNumericPrecisionRadixField  = "numeric_precision_radix"
	ParameterNumericScaleField           = "numeric_scale"
	ParameterDatetimePrecisionField      = "datetime_precision"
	ParameterIntervalTypeField           = "interval_type"
	ParameterIntervalPrecisionField      = "interval_precision"
	ParameterUdtCatalogField             = "udt_catalog"
	ParameterUdtSchemaField              = "udt_schema"
	ParameterUdtNameField                = "udt_name"
	ParameterScopeCatalogField           = "scope_catalog"
	ParameterScopeSchemaField            = "scope_schema"
	ParameterScopeNameField              = "scope_name"
	ParameterMaximumCardinalityField     = "maximum_cardinality"
	ParameterDtdIdentifierField          = "dtd_identifier"
	ParameterParameterDefaultField       = "parameter_default"
)

// WhereClauses for every type in Parameter.
var (
	ParameterSpecificCatalogWhere        SQLIdentifierField  = "specific_catalog"
	ParameterSpecificSchemaWhere         SQLIdentifierField  = "specific_schema"
	ParameterSpecificNameWhere           SQLIdentifierField  = "specific_name"
	ParameterOrdinalPositionWhere        CardinalNumberField = "ordinal_position"
	ParameterParameterModeWhere          CharacterDataField  = "parameter_mode"
	ParameterIsResultWhere               YesOrNoField        = "is_result"
	ParameterAsLocatorWhere              YesOrNoField        = "as_locator"
	ParameterParameterNameWhere          SQLIdentifierField  = "parameter_name"
	ParameterDataTypeWhere               CharacterDataField  = "data_type"
	ParameterCharacterMaximumLengthWhere CardinalNumberField = "character_maximum_length"
	ParameterCharacterOctetLengthWhere   CardinalNumberField = "character_octet_length"
	ParameterCharacterSetCatalogWhere    SQLIdentifierField  = "character_set_catalog"
	ParameterCharacterSetSchemaWhere     SQLIdentifierField  = "character_set_schema"
	ParameterCharacterSetNameWhere       SQLIdentifierField  = "character_set_name"
	ParameterCollationCatalogWhere       SQLIdentifierField  = "collation_catalog"
	ParameterCollationSchemaWhere        SQLIdentifierField  = "collation_schema"
	ParameterCollationNameWhere          SQLIdentifierField  = "collation_name"
	ParameterNumericPrecisionWhere       CardinalNumberField = "numeric_precision"
	ParameterNumericPrecisionRadixWhere  CardinalNumberField = "numeric_precision_radix"
	ParameterNumericScaleWhere           CardinalNumberField = "numeric_scale"
	ParameterDatetimePrecisionWhere      CardinalNumberField = "datetime_precision"
	ParameterIntervalTypeWhere           CharacterDataField  = "interval_type"
	ParameterIntervalPrecisionWhere      CardinalNumberField = "interval_precision"
	ParameterUdtCatalogWhere             SQLIdentifierField  = "udt_catalog"
	ParameterUdtSchemaWhere              SQLIdentifierField  = "udt_schema"
	ParameterUdtNameWhere                SQLIdentifierField  = "udt_name"
	ParameterScopeCatalogWhere           SQLIdentifierField  = "scope_catalog"
	ParameterScopeSchemaWhere            SQLIdentifierField  = "scope_schema"
	ParameterScopeNameWhere              SQLIdentifierField  = "scope_name"
	ParameterMaximumCardinalityWhere     CardinalNumberField = "maximum_cardinality"
	ParameterDtdIdentifierWhere          SQLIdentifierField  = "dtd_identifier"
	ParameterParameterDefaultWhere       CharacterDataField  = "parameter_default"
)

// QueryOneParameter retrieves a row from 'information_schema.parameters' as a Parameter.
func QueryOneParameter(db XODB, where WhereClause, order OrderBy) (*Parameter, error) {
	const origsqlstr = `SELECT ` +
		`specific_catalog, specific_schema, specific_name, ordinal_position, parameter_mode, is_result, as_locator, parameter_name, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier, parameter_default ` +
		`FROM information_schema.parameters WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	p := &Parameter{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&p.SpecificCatalog, &p.SpecificSchema, &p.SpecificName, &p.OrdinalPosition, &p.ParameterMode, &p.IsResult, &p.AsLocator, &p.ParameterName, &p.DataType, &p.CharacterMaximumLength, &p.CharacterOctetLength, &p.CharacterSetCatalog, &p.CharacterSetSchema, &p.CharacterSetName, &p.CollationCatalog, &p.CollationSchema, &p.CollationName, &p.NumericPrecision, &p.NumericPrecisionRadix, &p.NumericScale, &p.DatetimePrecision, &p.IntervalType, &p.IntervalPrecision, &p.UdtCatalog, &p.UdtSchema, &p.UdtName, &p.ScopeCatalog, &p.ScopeSchema, &p.ScopeName, &p.MaximumCardinality, &p.DtdIdentifier, &p.ParameterDefault)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return p, nil
}

// QueryParameter retrieves rows from 'information_schema.parameters' as a slice of Parameter.
func QueryParameter(db XODB, where WhereClause, order OrderBy) ([]*Parameter, error) {
	const origsqlstr = `SELECT ` +
		`specific_catalog, specific_schema, specific_name, ordinal_position, parameter_mode, is_result, as_locator, parameter_name, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier, parameter_default ` +
		`FROM information_schema.parameters WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*Parameter
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		p := Parameter{}

		err = q.Scan(&p.SpecificCatalog, &p.SpecificSchema, &p.SpecificName, &p.OrdinalPosition, &p.ParameterMode, &p.IsResult, &p.AsLocator, &p.ParameterName, &p.DataType, &p.CharacterMaximumLength, &p.CharacterOctetLength, &p.CharacterSetCatalog, &p.CharacterSetSchema, &p.CharacterSetName, &p.CollationCatalog, &p.CollationSchema, &p.CollationName, &p.NumericPrecision, &p.NumericPrecisionRadix, &p.NumericScale, &p.DatetimePrecision, &p.IntervalType, &p.IntervalPrecision, &p.UdtCatalog, &p.UdtSchema, &p.UdtName, &p.ScopeCatalog, &p.ScopeSchema, &p.ScopeName, &p.MaximumCardinality, &p.DtdIdentifier, &p.ParameterDefault)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &p)
	}
	return vals, nil
}

// AllParameter retrieves all rows from 'information_schema.parameters' as a slice of Parameter.
func AllParameter(db XODB, order OrderBy) ([]*Parameter, error) {
	const origsqlstr = `SELECT ` +
		`specific_catalog, specific_schema, specific_name, ordinal_position, parameter_mode, is_result, as_locator, parameter_name, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier, parameter_default ` +
		`FROM information_schema.parameters`

	sqlstr := origsqlstr + order.String()

	var vals []*Parameter
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		p := Parameter{}

		err = q.Scan(&p.SpecificCatalog, &p.SpecificSchema, &p.SpecificName, &p.OrdinalPosition, &p.ParameterMode, &p.IsResult, &p.AsLocator, &p.ParameterName, &p.DataType, &p.CharacterMaximumLength, &p.CharacterOctetLength, &p.CharacterSetCatalog, &p.CharacterSetSchema, &p.CharacterSetName, &p.CollationCatalog, &p.CollationSchema, &p.CollationName, &p.NumericPrecision, &p.NumericPrecisionRadix, &p.NumericScale, &p.DatetimePrecision, &p.IntervalType, &p.IntervalPrecision, &p.UdtCatalog, &p.UdtSchema, &p.UdtName, &p.ScopeCatalog, &p.ScopeSchema, &p.ScopeName, &p.MaximumCardinality, &p.DtdIdentifier, &p.ParameterDefault)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &p)
	}
	return vals, nil
}
