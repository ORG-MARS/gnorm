// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/pkg/errors"
)

// PgForeignDataWrapperTable is the database name for the table.
const PgForeignDataWrapperTable = "information_schema._pg_foreign_data_wrappers"

// PgForeignDataWrapper represents a row from 'information_schema._pg_foreign_data_wrappers'.
type PgForeignDataWrapper struct {
	Oid                        Oid              `json:"oid"`                           // oid
	Fdwowner                   Oid              `json:"fdwowner"`                      // fdwowner
	Fdwoptions                 []sql.NullString `json:"fdwoptions"`                    // fdwoptions
	ForeignDataWrapperCatalog  SQLIdentifier    `json:"foreign_data_wrapper_catalog"`  // foreign_data_wrapper_catalog
	ForeignDataWrapperName     SQLIdentifier    `json:"foreign_data_wrapper_name"`     // foreign_data_wrapper_name
	AuthorizationIdentifier    SQLIdentifier    `json:"authorization_identifier"`      // authorization_identifier
	ForeignDataWrapperLanguage CharacterData    `json:"foreign_data_wrapper_language"` // foreign_data_wrapper_language
}

// Constants defining each column in the table.
const (
	PgForeignDataWrapperOidField                        = "oid"
	PgForeignDataWrapperFdwownerField                   = "fdwowner"
	PgForeignDataWrapperFdwoptionsField                 = "fdwoptions"
	PgForeignDataWrapperForeignDataWrapperCatalogField  = "foreign_data_wrapper_catalog"
	PgForeignDataWrapperForeignDataWrapperNameField     = "foreign_data_wrapper_name"
	PgForeignDataWrapperAuthorizationIdentifierField    = "authorization_identifier"
	PgForeignDataWrapperForeignDataWrapperLanguageField = "foreign_data_wrapper_language"
)

// WhereClauses for every type in PgForeignDataWrapper.
var (
	PgForeignDataWrapperOidWhere                        OidField           = "oid"
	PgForeignDataWrapperFdwownerWhere                   OidField           = "fdwowner"
	PgForeignDataWrapperFdwoptionsWhere                 NullStringField    = "fdwoptions"
	PgForeignDataWrapperForeignDataWrapperCatalogWhere  SQLIdentifierField = "foreign_data_wrapper_catalog"
	PgForeignDataWrapperForeignDataWrapperNameWhere     SQLIdentifierField = "foreign_data_wrapper_name"
	PgForeignDataWrapperAuthorizationIdentifierWhere    SQLIdentifierField = "authorization_identifier"
	PgForeignDataWrapperForeignDataWrapperLanguageWhere CharacterDataField = "foreign_data_wrapper_language"
)

// QueryOnePgForeignDataWrapper retrieves a row from 'information_schema._pg_foreign_data_wrappers' as a PgForeignDataWrapper.
func QueryOnePgForeignDataWrapper(db XODB, where WhereClause, order OrderBy) (*PgForeignDataWrapper, error) {
	const origsqlstr = `SELECT ` +
		`oid, fdwowner, fdwoptions, foreign_data_wrapper_catalog, foreign_data_wrapper_name, authorization_identifier, foreign_data_wrapper_language ` +
		`FROM information_schema._pg_foreign_data_wrappers WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	pfdw := &PgForeignDataWrapper{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&pfdw.Oid, &pfdw.Fdwowner, &pfdw.Fdwoptions, &pfdw.ForeignDataWrapperCatalog, &pfdw.ForeignDataWrapperName, &pfdw.AuthorizationIdentifier, &pfdw.ForeignDataWrapperLanguage)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return pfdw, nil
}

// QueryPgForeignDataWrapper retrieves rows from 'information_schema._pg_foreign_data_wrappers' as a slice of PgForeignDataWrapper.
func QueryPgForeignDataWrapper(db XODB, where WhereClause, order OrderBy) ([]*PgForeignDataWrapper, error) {
	const origsqlstr = `SELECT ` +
		`oid, fdwowner, fdwoptions, foreign_data_wrapper_catalog, foreign_data_wrapper_name, authorization_identifier, foreign_data_wrapper_language ` +
		`FROM information_schema._pg_foreign_data_wrappers WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*PgForeignDataWrapper
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		pfdw := PgForeignDataWrapper{}

		err = q.Scan(&pfdw.Oid, &pfdw.Fdwowner, &pfdw.Fdwoptions, &pfdw.ForeignDataWrapperCatalog, &pfdw.ForeignDataWrapperName, &pfdw.AuthorizationIdentifier, &pfdw.ForeignDataWrapperLanguage)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &pfdw)
	}
	return vals, nil
}

// AllPgForeignDataWrapper retrieves all rows from 'information_schema._pg_foreign_data_wrappers' as a slice of PgForeignDataWrapper.
func AllPgForeignDataWrapper(db XODB, order OrderBy) ([]*PgForeignDataWrapper, error) {
	const origsqlstr = `SELECT ` +
		`oid, fdwowner, fdwoptions, foreign_data_wrapper_catalog, foreign_data_wrapper_name, authorization_identifier, foreign_data_wrapper_language ` +
		`FROM information_schema._pg_foreign_data_wrappers`

	sqlstr := origsqlstr + order.String()

	var vals []*PgForeignDataWrapper
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		pfdw := PgForeignDataWrapper{}

		err = q.Scan(&pfdw.Oid, &pfdw.Fdwowner, &pfdw.Fdwoptions, &pfdw.ForeignDataWrapperCatalog, &pfdw.ForeignDataWrapperName, &pfdw.AuthorizationIdentifier, &pfdw.ForeignDataWrapperLanguage)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &pfdw)
	}
	return vals, nil
}
