// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
)

// PgUserMappingTable is the database name for the table.
const PgUserMappingTable = "information_schema._pg_user_mappings"

// PgUserMapping represents a row from 'information_schema._pg_user_mappings'.
type PgUserMapping struct {
	Oid                     Oid              `json:"oid"`                      // oid
	Umoptions               []sql.NullString `json:"umoptions"`                // umoptions
	Umuser                  Oid              `json:"umuser"`                   // umuser
	AuthorizationIdentifier SQLIdentifier    `json:"authorization_identifier"` // authorization_identifier
	ForeignServerCatalog    SQLIdentifier    `json:"foreign_server_catalog"`   // foreign_server_catalog
	ForeignServerName       SQLIdentifier    `json:"foreign_server_name"`      // foreign_server_name
	Srvowner                SQLIdentifier    `json:"srvowner"`                 // srvowner
}

// Constants defining each column in the table.
const (
	PgUserMappingOidField                     = "oid"
	PgUserMappingUmoptionsField               = "umoptions"
	PgUserMappingUmuserField                  = "umuser"
	PgUserMappingAuthorizationIdentifierField = "authorization_identifier"
	PgUserMappingForeignServerCatalogField    = "foreign_server_catalog"
	PgUserMappingForeignServerNameField       = "foreign_server_name"
	PgUserMappingSrvownerField                = "srvowner"
)

// WhereClauses for every type in PgUserMapping.
var (
	PgUserMappingOidWhere                     OidField           = "oid"
	PgUserMappingUmoptionsWhere               NullStringField    = "umoptions"
	PgUserMappingUmuserWhere                  OidField           = "umuser"
	PgUserMappingAuthorizationIdentifierWhere SQLIdentifierField = "authorization_identifier"
	PgUserMappingForeignServerCatalogWhere    SQLIdentifierField = "foreign_server_catalog"
	PgUserMappingForeignServerNameWhere       SQLIdentifierField = "foreign_server_name"
	PgUserMappingSrvownerWhere                SQLIdentifierField = "srvowner"
)

// QueryOnePgUserMapping retrieves a row from 'information_schema._pg_user_mappings' as a PgUserMapping.
func QueryOnePgUserMapping(db XODB, where WhereClause, order OrderBy) (*PgUserMapping, error) {
	const origsqlstr = `SELECT ` +
		`oid, umoptions, umuser, authorization_identifier, foreign_server_catalog, foreign_server_name, srvowner ` +
		`FROM information_schema._pg_user_mappings WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	pum := &PgUserMapping{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&pum.Oid, &pum.Umoptions, &pum.Umuser, &pum.AuthorizationIdentifier, &pum.ForeignServerCatalog, &pum.ForeignServerName, &pum.Srvowner)
	if err != nil {
		return nil, err
	}
	return pum, nil
}

// QueryPgUserMapping retrieves rows from 'information_schema._pg_user_mappings' as a slice of PgUserMapping.
func QueryPgUserMapping(db XODB, where WhereClause, order OrderBy) ([]*PgUserMapping, error) {
	const origsqlstr = `SELECT ` +
		`oid, umoptions, umuser, authorization_identifier, foreign_server_catalog, foreign_server_name, srvowner ` +
		`FROM information_schema._pg_user_mappings WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*PgUserMapping
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		pum := PgUserMapping{}

		err = q.Scan(&pum.Oid, &pum.Umoptions, &pum.Umuser, &pum.AuthorizationIdentifier, &pum.ForeignServerCatalog, &pum.ForeignServerName, &pum.Srvowner)
		if err != nil {
			return nil, err
		}

		vals = append(vals, &pum)
	}
	return vals, nil
}
