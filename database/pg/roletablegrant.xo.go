// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

// RoleTableGrantTable is the database name for the table.
const RoleTableGrantTable = "information_schema.role_table_grants"

// RoleTableGrant represents a row from 'information_schema.role_table_grants'.
type RoleTableGrant struct {
	Grantor       SQLIdentifier `json:"grantor"`        // grantor
	Grantee       SQLIdentifier `json:"grantee"`        // grantee
	TableCatalog  SQLIdentifier `json:"table_catalog"`  // table_catalog
	TableSchema   SQLIdentifier `json:"table_schema"`   // table_schema
	TableName     SQLIdentifier `json:"table_name"`     // table_name
	PrivilegeType CharacterData `json:"privilege_type"` // privilege_type
	IsGrantable   YesOrNo       `json:"is_grantable"`   // is_grantable
	WithHierarchy YesOrNo       `json:"with_hierarchy"` // with_hierarchy
}

// Constants defining each column in the table.
const (
	RoleTableGrantGrantorField       = "grantor"
	RoleTableGrantGranteeField       = "grantee"
	RoleTableGrantTableCatalogField  = "table_catalog"
	RoleTableGrantTableSchemaField   = "table_schema"
	RoleTableGrantTableNameField     = "table_name"
	RoleTableGrantPrivilegeTypeField = "privilege_type"
	RoleTableGrantIsGrantableField   = "is_grantable"
	RoleTableGrantWithHierarchyField = "with_hierarchy"
)

// WhereClauses for every type in RoleTableGrant.
var (
	RoleTableGrantGrantorWhere       SQLIdentifierField = "grantor"
	RoleTableGrantGranteeWhere       SQLIdentifierField = "grantee"
	RoleTableGrantTableCatalogWhere  SQLIdentifierField = "table_catalog"
	RoleTableGrantTableSchemaWhere   SQLIdentifierField = "table_schema"
	RoleTableGrantTableNameWhere     SQLIdentifierField = "table_name"
	RoleTableGrantPrivilegeTypeWhere CharacterDataField = "privilege_type"
	RoleTableGrantIsGrantableWhere   YesOrNoField       = "is_grantable"
	RoleTableGrantWithHierarchyWhere YesOrNoField       = "with_hierarchy"
)

// QueryOneRoleTableGrant retrieves a row from 'information_schema.role_table_grants' as a RoleTableGrant.
func QueryOneRoleTableGrant(db XODB, where WhereClause, order OrderBy) (*RoleTableGrant, error) {
	const origsqlstr = `SELECT ` +
		`grantor, grantee, table_catalog, table_schema, table_name, privilege_type, is_grantable, with_hierarchy ` +
		`FROM information_schema.role_table_grants WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	rtg := &RoleTableGrant{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&rtg.Grantor, &rtg.Grantee, &rtg.TableCatalog, &rtg.TableSchema, &rtg.TableName, &rtg.PrivilegeType, &rtg.IsGrantable, &rtg.WithHierarchy)
	if err != nil {
		return nil, err
	}
	return rtg, nil
}

// QueryRoleTableGrant retrieves rows from 'information_schema.role_table_grants' as a slice of RoleTableGrant.
func QueryRoleTableGrant(db XODB, where WhereClause, order OrderBy) ([]*RoleTableGrant, error) {
	const origsqlstr = `SELECT ` +
		`grantor, grantee, table_catalog, table_schema, table_name, privilege_type, is_grantable, with_hierarchy ` +
		`FROM information_schema.role_table_grants WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*RoleTableGrant
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		rtg := RoleTableGrant{}

		err = q.Scan(&rtg.Grantor, &rtg.Grantee, &rtg.TableCatalog, &rtg.TableSchema, &rtg.TableName, &rtg.PrivilegeType, &rtg.IsGrantable, &rtg.WithHierarchy)
		if err != nil {
			return nil, err
		}

		vals = append(vals, &rtg)
	}
	return vals, nil
}
