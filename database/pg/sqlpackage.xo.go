// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

import (
	"github.com/pkg/errors"
)

// SQLPackageTable is the database name for the table.
const SQLPackageTable = "information_schema.sql_packages"

// SQLPackage represents a row from 'information_schema.sql_packages'.
type SQLPackage struct {
	FeatureID    CharacterData `json:"feature_id"`     // feature_id
	FeatureName  CharacterData `json:"feature_name"`   // feature_name
	IsSupported  YesOrNo       `json:"is_supported"`   // is_supported
	IsVerifiedBy CharacterData `json:"is_verified_by"` // is_verified_by
	Comments     CharacterData `json:"comments"`       // comments
}

// Constants defining each column in the table.
const (
	SQLPackageFeatureIDField    = "feature_id"
	SQLPackageFeatureNameField  = "feature_name"
	SQLPackageIsSupportedField  = "is_supported"
	SQLPackageIsVerifiedByField = "is_verified_by"
	SQLPackageCommentsField     = "comments"
)

// WhereClauses for every type in SQLPackage.
var (
	SQLPackageFeatureIDWhere    CharacterDataField = "feature_id"
	SQLPackageFeatureNameWhere  CharacterDataField = "feature_name"
	SQLPackageIsSupportedWhere  YesOrNoField       = "is_supported"
	SQLPackageIsVerifiedByWhere CharacterDataField = "is_verified_by"
	SQLPackageCommentsWhere     CharacterDataField = "comments"
)

// QueryOneSQLPackage retrieves a row from 'information_schema.sql_packages' as a SQLPackage.
func QueryOneSQLPackage(db XODB, where WhereClause, order OrderBy) (*SQLPackage, error) {
	const origsqlstr = `SELECT ` +
		`feature_id, feature_name, is_supported, is_verified_by, comments ` +
		`FROM information_schema.sql_packages WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	sp := &SQLPackage{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&sp.FeatureID, &sp.FeatureName, &sp.IsSupported, &sp.IsVerifiedBy, &sp.Comments)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return sp, nil
}

// QuerySQLPackage retrieves rows from 'information_schema.sql_packages' as a slice of SQLPackage.
func QuerySQLPackage(db XODB, where WhereClause, order OrderBy) ([]*SQLPackage, error) {
	const origsqlstr = `SELECT ` +
		`feature_id, feature_name, is_supported, is_verified_by, comments ` +
		`FROM information_schema.sql_packages WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*SQLPackage
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		sp := SQLPackage{}

		err = q.Scan(&sp.FeatureID, &sp.FeatureName, &sp.IsSupported, &sp.IsVerifiedBy, &sp.Comments)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &sp)
	}
	return vals, nil
}

// AllSQLPackage retrieves all rows from 'information_schema.sql_packages' as a slice of SQLPackage.
func AllSQLPackage(db XODB, order OrderBy) ([]*SQLPackage, error) {
	const origsqlstr = `SELECT ` +
		`feature_id, feature_name, is_supported, is_verified_by, comments ` +
		`FROM information_schema.sql_packages`

	sqlstr := origsqlstr + order.String()

	var vals []*SQLPackage
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	for q.Next() {
		sp := SQLPackage{}

		err = q.Scan(&sp.FeatureID, &sp.FeatureName, &sp.IsSupported, &sp.IsVerifiedBy, &sp.Comments)
		if err != nil {
			return nil, errors.WithStack(err)
		}

		vals = append(vals, &sp)
	}
	return vals, nil
}
