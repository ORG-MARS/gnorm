// Package pg contains the types for schema 'information_schema'.
package pg

// GENERATED BY XO. DO NOT EDIT.

// SQLSizingTable is the database name for the table.
const SQLSizingTable = "information_schema.sql_sizing"

// SQLSizing represents a row from 'information_schema.sql_sizing'.
type SQLSizing struct {
	SizingID       CardinalNumber `json:"sizing_id"`       // sizing_id
	SizingName     CharacterData  `json:"sizing_name"`     // sizing_name
	SupportedValue CardinalNumber `json:"supported_value"` // supported_value
	Comments       CharacterData  `json:"comments"`        // comments
}

// Constants defining each column in the table.
const (
	SQLSizingSizingIDField       = "sizing_id"
	SQLSizingSizingNameField     = "sizing_name"
	SQLSizingSupportedValueField = "supported_value"
	SQLSizingCommentsField       = "comments"
)

// WhereClauses for every type in SQLSizing.
var (
	SQLSizingSizingIDWhere       CardinalNumberField = "sizing_id"
	SQLSizingSizingNameWhere     CharacterDataField  = "sizing_name"
	SQLSizingSupportedValueWhere CardinalNumberField = "supported_value"
	SQLSizingCommentsWhere       CharacterDataField  = "comments"
)

// QueryOneSQLSizing retrieves a row from 'information_schema.sql_sizing' as a SQLSizing.
func QueryOneSQLSizing(db XODB, where WhereClause, order OrderBy) (*SQLSizing, error) {
	const origsqlstr = `SELECT ` +
		`sizing_id, sizing_name, supported_value, comments ` +
		`FROM information_schema.sql_sizing WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String() + " LIMIT 1"

	ss := &SQLSizing{}
	err := db.QueryRow(sqlstr, where.Values()...).Scan(&ss.SizingID, &ss.SizingName, &ss.SupportedValue, &ss.Comments)
	if err != nil {
		return nil, err
	}
	return ss, nil
}

// QuerySQLSizing retrieves rows from 'information_schema.sql_sizing' as a slice of SQLSizing.
func QuerySQLSizing(db XODB, where WhereClause, order OrderBy) ([]*SQLSizing, error) {
	const origsqlstr = `SELECT ` +
		`sizing_id, sizing_name, supported_value, comments ` +
		`FROM information_schema.sql_sizing WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") " + order.String()

	var vals []*SQLSizing
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		ss := SQLSizing{}

		err = q.Scan(&ss.SizingID, &ss.SizingName, &ss.SupportedValue, &ss.Comments)
		if err != nil {
			return nil, err
		}

		vals = append(vals, &ss)
	}
	return vals, nil
}
